// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                   String               @id @default(cuid())
  firstName            String               @default("")
  lastName             String               @default("")
  email                String               @default("")
  username             String               @unique @default("")
  phone                String               @default("")
  mobile               String               @unique @default("")
  password             String?
  image_filesize       Int?
  image_extension      String?
  image_width          Int?
  image_height         Int?
  image_id             String?
  pancard_filesize     Int?
  pancard_extension    String?
  pancard_width        Int?
  pancard_height       Int?
  pancard_id           String?
  pancardNo            String               @default("")
  idProof_filesize     Int?
  idProof_extension    String?
  idProof_width        Int?
  idProof_height       Int?
  idProof_id           String?
  idProofType          UserIdProofTypeType?
  idProofNo            String               @default("")
  dealership_filesize  Int?
  dealership_extension String?
  dealership_width     Int?
  dealership_height    Int?
  dealership_id        String?
  country              String               @default("")
  state                String               @default("")
  city                 String               @default("")
  role                 UserRoleType?        @default(seller)
  status               UserStatusType?      @default(active)
  userEvents           EventUser[]          @relation("EventUser_user")
  bidCountUpdates      BidCountUpdate[]     @relation("BidCountUpdate_createdBy")
  activeBids           Bid[]                @relation("Bid_currentBidUser")
  quotedBids           UserBid[]            @relation("UserBid_user")
  createdAt            DateTime?            @default(now())
  updatedAt            DateTime?            @updatedAt
  magicAuthToken       String?
  magicAuthIssuedAt    DateTime?
  magicAuthRedeemedAt  DateTime?
}

model Event {
  id              String           @id @default(cuid())
  seller          Seller?          @relation("Event_seller", fields: [sellerId], references: [id])
  sellerId        String?          @map("seller")
  eventType       EventType?       @relation("Event_eventType", fields: [eventTypeId], references: [id])
  eventTypeId     String?          @map("eventType")
  eventCategory   EventCategory?   @relation("Event_eventCategory", fields: [eventCategoryId], references: [id])
  eventCategoryId String?          @map("eventCategory")
  location        Location?        @relation("Event_location", fields: [locationId], references: [id])
  locationId      String?          @map("location")
  vehicles        Vehicle[]        @relation("Vehicle_event")
  startDate       DateTime
  endDate         DateTime
  noOfBids        Int
  status          EventStatusType? @default(active)
  eventUsers      EventUser[]      @relation("EventUser_event")
  bids            Bid[]            @relation("Bid_event")
  ExcelFile       ExcelUpload?     @relation("Event_ExcelFile", fields: [ExcelFileId], references: [id])
  ExcelFileId     String?          @unique @map("ExcelFile")
  createdAt       DateTime?        @default(now())
  updatedAt       DateTime?        @updatedAt

  @@index([sellerId])
  @@index([eventTypeId])
  @@index([eventCategoryId])
  @@index([locationId])
}

model EventType {
  id        String    @id @default(cuid())
  name      String    @default("")
  events    Event[]   @relation("Event_eventType")
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Location {
  id        String    @id @default(cuid())
  name      String    @default("")
  country   String    @default("")
  state     String    @default("")
  city      String    @default("")
  events    Event[]   @relation("Event_location")
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model EventCategory {
  id        String    @id @default(cuid())
  name      String    @default("")
  events    Event[]   @relation("Event_eventCategory")
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Vehicle {
  id                  String           @id @default(cuid())
  registrationNumber  String           @default("")
  loanAgreementNo     String           @default("")
  registeredOwnerName String           @default("")
  make                String           @default("")
  model               String           @default("")
  varient             String           @default("")
  categoty            String           @default("")
  fuel                VehicleFuelType?
  type                String           @default("")
  rcStatus            String           @default("")
  yearOfManufacture   Int?
  ownership           Int?
  kmReading           Int?
  insuranceStatus     String           @default("")
  yardLocation        String           @default("")
  startPrice          Float?
  reservePrice        Float?
  repoDt              Int?
  veicleLocation      String           @default("")
  vehicleRemarks      String           @default("")
  auctionManager      String           @default("")
  actionManager       String           @default("")
  sellerName          String           @default("")
  parkingCharges      String           @default("")
  insurance           String           @default("")
  insuranceValidTill  String           @default("")
  tax                 String           @default("")
  fitness             String           @default("")
  permit              String           @default("")
  fitnessPermit       String           @default("")
  engineNo            String           @default("")
  chassisNo           String           @default("")
  frontImage          String           @default("")
  backImage           String           @default("")
  leftImage           String           @default("")
  rightImage          String           @default("")
  image5              String           @default("")
  image6              String           @default("")
  image7              String           @default("")
  image8              String           @default("")
  image9              String           @default("")
  image10             String           @default("")
  image11             String           @default("")
  image12             String           @default("")
  event               Event?           @relation("Vehicle_event", fields: [eventId], references: [id])
  eventId             String?          @map("event")
  ExcelFile           ExcelUpload?     @relation("Vehicle_ExcelFile", fields: [ExcelFileId], references: [id])
  ExcelFileId         String?          @map("ExcelFile")
  bids                Bid[]            @relation("Bid_vehicles")
  createdAt           DateTime?        @default(now())
  updatedAt           DateTime?        @updatedAt

  @@index([registrationNumber])
  @@index([eventId])
  @@index([ExcelFileId])
}

model EventUser {
  id              String               @id @default(cuid())
  event           Event?               @relation("EventUser_event", fields: [eventId], references: [id])
  eventId         String?              @map("event")
  user            User?                @relation("EventUser_user", fields: [userId], references: [id])
  userId          String?              @map("user")
  remainingBids   Int?                 @default(10)
  bidCountUpdates BidCountUpdate[]     @relation("BidCountUpdate_eventUser")
  status          EventUserStatusType?
  createdAt       DateTime?            @default(now())
  updatedAt       DateTime?            @updatedAt

  @@index([eventId])
  @@index([userId])
}

model ExcelUpload {
  id            String    @id @default(cuid())
  name          String    @default("")
  file_filesize Int?
  file_filename String?
  event         Event?    @relation("Event_ExcelFile")
  vehicles      Vehicle[] @relation("Vehicle_ExcelFile")
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
}

model Seller {
  id        String    @id @default(cuid())
  name      String    @default("")
  events    Event[]   @relation("Event_seller")
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model BidCountUpdate {
  id              String                    @id @default(cuid())
  eventUser       EventUser?                @relation("BidCountUpdate_eventUser", fields: [eventUserId], references: [id])
  eventUserId     String?                   @map("eventUser")
  updatedBidCount Int?                      @default(10)
  status          BidCountUpdateStatusType?
  createdBy       User?                     @relation("BidCountUpdate_createdBy", fields: [createdById], references: [id])
  createdById     String?                   @map("createdBy")
  createdAt       DateTime?                 @default(now())
  updatedAt       DateTime?                 @updatedAt

  @@index([eventUserId])
  @@index([createdById])
}

model Bid {
  id               String         @id @default(cuid())
  eventTimeExpire  DateTime?
  bidTimeExpire    DateTime?
  currentBidAmount Int?
  currentBidUser   User?          @relation("Bid_currentBidUser", fields: [currentBidUserId], references: [id])
  currentBidUserId String?        @map("currentBidUser")
  vehicles         Vehicle[]      @relation("Bid_vehicles")
  event            Event?         @relation("Bid_event", fields: [eventId], references: [id])
  eventId          String?        @map("event")
  status           BidStatusType?
  userBids         UserBid[]      @relation("UserBid_bid")
  createdAt        DateTime?      @default(now())
  updatedAt        DateTime?      @updatedAt

  @@index([currentBidUserId])
  @@index([eventId])
}

model UserBid {
  id        String             @id @default(cuid())
  amount    Int?
  user      User?              @relation("UserBid_user", fields: [userId], references: [id])
  userId    String?            @map("user")
  bid       Bid?               @relation("UserBid_bid", fields: [bidId], references: [id])
  bidId     String?            @map("bid")
  status    UserBidStatusType?
  createdAt DateTime?          @default(now())
  updatedAt DateTime?          @updatedAt

  @@index([userId])
  @@index([bidId])
}

enum UserIdProofTypeType {
  aadhar
  drivingLicense
  passport
}

enum UserRoleType {
  admin
  seller
  dealer
}

enum UserStatusType {
  pending
  blocked
  active
  inactive
}

enum EventStatusType {
  pending
  blocked
  active
  inactive
}

enum VehicleFuelType {
  diesel
  petrol
  cng
  lpg
  electric
}

enum EventUserStatusType {
  pending
  blocked
  accepted
}

enum BidCountUpdateStatusType {
  pending
  blocked
  accepted
}

enum BidStatusType {
  pending
  blocked
  live
  closed
}

enum UserBidStatusType {
  pending
  blocked
  live
  closed
  accepted
}