// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                        String               @id @default(cuid())
  idNo                      Int                  @default(autoincrement())
  dealerId                  String               @default("")
  firstName                 String               @default("")
  lastName                  String               @default("")
  email                     String               @default("")
  username                  String               @unique @default("")
  phone                     String               @default("")
  businessName              String               @default("")
  category                  EventType[]          @relation("EventType_users")
  mobile                    String               @unique @default("")
  password                  String?
  vehicleBuyingLimit        Int?                 @default(0)
  specialVehicleBuyingLimit Int?                 @default(0)
  image_filesize            Int?
  image_extension           String?
  image_width               Int?
  image_height              Int?
  image_id                  String?
  pancard_filesize          Int?
  pancard_extension         String?
  pancard_width             Int?
  pancard_height            Int?
  pancard_id                String?
  pancardNo                 String               @default("")
  idProof_filesize          Int?
  idProof_extension         String?
  idProof_width             Int?
  idProof_height            Int?
  idProof_id                String?
  idProofBack_filesize      Int?
  idProofBack_extension     String?
  idProofBack_width         Int?
  idProofBack_height        Int?
  idProofBack_id            String?
  idProofType               UserIdProofTypeType?
  idProofNo                 String               @default("")
  dealership_filesize       Int?
  dealership_extension      String?
  dealership_width          Int?
  dealership_height         Int?
  dealership_id             String?
  country                   String               @default("")
  city                      String               @default("")
  role                      UserRoleType?        @default(dealer)
  watchList                 Vehicle[]            @relation("User_watchList")
  emdUpdates                EmdUpdate[]          @relation("EmdUpdate_user")
  payments                  Payment[]            @relation("Payment_user")
  emdUpdatesByAdmin         EmdUpdate[]          @relation("EmdUpdate_createdBy")
  status                    UserStatusType?      @default(pending)
  state                     String               @default("")
  states                    State[]              @relation("State_users")
  activeBids                Vehicle[]            @relation("Vehicle_currentBidUser")
  quotedBids                Bid[]                @relation("Bid_user")
  bannedSellers             Seller[]             @relation("Seller_bannedUsers")
  createdAt                 DateTime?            @default(now())
  updatedAt                 DateTime?            @updatedAt
  magicAuthToken            String?
  magicAuthIssuedAt         DateTime?
  magicAuthRedeemedAt       DateTime?

  @@index([idNo])
}

model Payment {
  id              String      @id @default(cuid())
  refNo           Int         @default(autoincrement())
  amount          Int?        @default(10000)
  paymentFor      String
  description     String      @default("")
  status          String?     @default("pending")
  user            User?       @relation("Payment_user", fields: [userId], references: [id])
  userId          String?     @map("user")
  image_filesize  Int?
  image_extension String?
  image_width     Int?
  image_height    Int?
  image_id        String?
  emdUpdate       EmdUpdate[] @relation("EmdUpdate_payment")
  createdAt       DateTime?   @default(now())
  updatedAt       DateTime?   @updatedAt

  @@index([refNo])
  @@index([userId])
}

model EmdUpdate {
  id                                 String    @id @default(cuid())
  emdNo                              Int       @default(autoincrement())
  vehicleBuyingLimitIncrement        Int?      @default(1)
  specialVehicleBuyingLimitIncrement Int?      @default(0)
  payment                            Payment?  @relation("EmdUpdate_payment", fields: [paymentId], references: [id])
  paymentId                          String?   @map("payment")
  user                               User?     @relation("EmdUpdate_user", fields: [userId], references: [id])
  userId                             String?   @map("user")
  createdAt                          DateTime? @default(now())
  updatedAt                          DateTime? @updatedAt
  createdBy                          User?     @relation("EmdUpdate_createdBy", fields: [createdById], references: [id])
  createdById                        String?   @map("createdBy")

  @@index([emdNo])
  @@index([paymentId])
  @@index([userId])
  @@index([createdById])
}

model Event {
  id                        String            @id @default(cuid())
  eventNo                   Int               @default(autoincrement())
  seller                    Seller?           @relation("Event_seller", fields: [sellerId], references: [id])
  sellerId                  String?           @map("seller")
  eventType                 EventType[]       @relation("Event_eventType")
  eventCategory             String?
  location                  Location?         @relation("Event_location", fields: [locationId], references: [id])
  locationId                String?           @map("location")
  vehicles                  Vehicle[]         @relation("Vehicle_event")
  startDate                 DateTime
  endDate                   DateTime
  noOfBids                  Int
  status                    EventStatusType?  @default(active)
  ExcelFile                 ExcelUpload?      @relation("Event_ExcelFile", fields: [ExcelFileId], references: [id])
  ExcelFileId               String?           @unique @map("ExcelFile")
  downloadableFile_filesize Int?
  downloadableFile_filename String?
  termsAndConditions        Json              @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  createdAt                 DateTime?         @default(now())
  updatedAt                 DateTime?         @updatedAt
  bidLock                   EventBidLockType? @default(unlocked)
  isSpecialEvent            Boolean           @default(false)
  extraTimeTrigerIn         Int?              @default(2)
  extraTime                 Int?              @default(2)
  vehicleLiveTimeIn         Int?              @default(0)
  gapInBetweenVehicles      Int?              @default(0)

  @@index([eventNo])
  @@index([sellerId])
  @@index([locationId])
}

model Vehicle {
  id                     String                @id @default(cuid())
  vehicleIndexNo         Int                   @default(autoincrement())
  registrationNumber     String                @default("")
  bidTimeExpire          DateTime
  bidStartTime           DateTime
  bidAmountUpdate        Int?
  currentBidAmount       Int?                  @default(0)
  startBidAmount         Int?                  @default(0)
  currentBidUser         User?                 @relation("Vehicle_currentBidUser", fields: [currentBidUserId], references: [id])
  currentBidUserId       String?               @map("currentBidUser")
  event                  Event?                @relation("Vehicle_event", fields: [eventId], references: [id])
  eventId                String?               @map("event")
  bidStatus              VehicleBidStatusType? @default(pending)
  userVehicleBids        Bid[]                 @relation("Bid_bidVehicle")
  loanAgreementNo        String                @default("")
  registeredOwnerName    String                @default("")
  quoteIncreament        Int?                  @default(1000)
  make                   String                @default("")
  model                  String                @default("")
  varient                String                @default("")
  categoty               String                @default("")
  fuel                   String                @default("")
  type                   String                @default("")
  rcStatus               String                @default("")
  yearOfManufacture      Int?
  ownership              Int?
  mileage                Int?
  kmReading              Int?
  insuranceStatus        String                @default("")
  yardLocation           String                @default("")
  startPrice             Float?
  reservePrice           Float?
  repoDt                 DateTime?
  veicleLocation         String                @default("")
  vehicleRemarks         String                @default("")
  auctionManager         String                @default("")
  parkingCharges         String                @default("")
  insurance              String                @default("")
  insuranceValidTill     DateTime?
  tax                    String                @default("")
  taxValidityDate        DateTime?
  fitness                String                @default("")
  permit                 String                @default("")
  fitnessPermit          String                @default("")
  engineNo               String                @default("")
  chassisNo              String                @default("")
  frontImage             String                @default("")
  backImage              String                @default("")
  leftImage              String                @default("")
  rightImage             String                @default("")
  image5                 String                @default("")
  image6                 String                @default("")
  inspectionLink         String                @default("")
  autobseContact         String                @default("")
  autobse_contact_person String                @default("")
  vehicleCondition       String                @default("")
  powerSteering          String                @default("")
  shape                  String                @default("")
  color                  String                @default("")
  state                  String                @default("")
  city                   String                @default("")
  area                   String                @default("")
  paymentTerms           String                @default("")
  dateOfRegistration     DateTime?
  hypothication          String                @default("")
  climateControl         String                @default("")
  doorCount              Int?
  gearBox                String                @default("")
  buyerFees              String                @default("")
  rtoFine                String                @default("")
  parkingRate            String                @default("")
  approxParkingCharges   String                @default("")
  clientContactPerson    String                @default("")
  clientContactNo        String                @default("")
  additionalRemarks      String                @default("")
  watchedBy              User[]                @relation("User_watchList")
  ExcelFile              ExcelUpload?          @relation("Vehicle_ExcelFile", fields: [ExcelFileId], references: [id])
  ExcelFileId            String?               @map("ExcelFile")
  createdAt              DateTime?             @default(now())
  updatedAt              DateTime?             @updatedAt

  @@index([vehicleIndexNo])
  @@index([registrationNumber])
  @@index([currentBidUserId])
  @@index([eventId])
  @@index([ExcelFileId])
}

model Bid {
  id           String    @id @default(cuid())
  name         String    @default("")
  amount       Int?
  user         User?     @relation("Bid_user", fields: [userId], references: [id])
  userId       String?   @map("user")
  bidVehicle   Vehicle?  @relation("Bid_bidVehicle", fields: [bidVehicleId], references: [id])
  bidVehicleId String?   @map("bidVehicle")
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt

  @@index([userId])
  @@index([bidVehicleId])
}

model EventType {
  id        String    @id @default(cuid())
  name      String    @default("")
  events    Event[]   @relation("Event_eventType")
  users     User?     @relation("EventType_users", fields: [usersId], references: [id])
  usersId   String?   @map("users")
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@index([usersId])
}

model Location {
  id        String    @id @default(cuid())
  name      String    @default("")
  country   String    @default("")
  state     State?    @relation("Location_state", fields: [stateId], references: [id])
  stateId   String?   @map("state")
  city      String    @default("")
  events    Event[]   @relation("Event_location")
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@index([stateId])
}

model State {
  id        String     @id @default(cuid())
  name      String     @default("")
  users     User[]     @relation("State_users")
  locations Location[] @relation("Location_state")
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt
}

model ExcelUpload {
  id            String    @id @default(cuid())
  name          String    @default("")
  file_filesize Int?
  file_filename String?
  event         Event?    @relation("Event_ExcelFile")
  vehicles      Vehicle[] @relation("Vehicle_ExcelFile")
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
}

model Seller {
  id          String    @id @default(cuid())
  name        String    @default("")
  events      Event[]   @relation("Event_seller")
  bannedUsers User[]    @relation("Seller_bannedUsers")
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

enum UserIdProofTypeType {
  aadhar
  drivingLicense
  passport
}

enum UserRoleType {
  admin
  staff
  seller
  dealer
}

enum UserStatusType {
  pending
  blocked
  active
  inactive
}

enum EventStatusType {
  pending
  blocked
  active
  inactive
  stop
}

enum EventBidLockType {
  locked
  unlocked
}

enum VehicleBidStatusType {
  pending
  approved
  fulfilled
  declined
}