// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                    String               @id @default(cuid())
  firstName             String               @default("")
  lastName              String               @default("")
  email                 String               @default("")
  username              String               @unique @default("")
  phone                 String               @default("")
  mobile                String               @unique @default("")
  password              String?
  image_filesize        Int?
  image_extension       String?
  image_width           Int?
  image_height          Int?
  image_id              String?
  pancard_filesize      Int?
  pancard_extension     String?
  pancard_width         Int?
  pancard_height        Int?
  pancard_id            String?
  pancardNo             String               @default("")
  idProof_filesize      Int?
  idProof_extension     String?
  idProof_width         Int?
  idProof_height        Int?
  idProof_id            String?
  idProofBack_filesize  Int?
  idProofBack_extension String?
  idProofBack_width     Int?
  idProofBack_height    Int?
  idProofBack_id        String?
  idProofType           UserIdProofTypeType?
  idProofNo             String               @default("")
  dealership_filesize   Int?
  dealership_extension  String?
  dealership_width      Int?
  dealership_height     Int?
  dealership_id         String?
  country               String               @default("")
  state                 String               @default("")
  city                  String               @default("")
  role                  UserRoleType?        @default(dealer)
  bidEnabledVehicles    VehicleUser[]        @relation("VehicleUser_user")
  emdBalance            Int?                 @default(0)
  status                UserStatusType?      @default(pending)
  states                State[]              @relation("State_users")
  bidCountUpdates       BidCountUpdate[]     @relation("BidCountUpdate_createdFor")
  activeBids            Vehicle[]            @relation("Vehicle_currentBidUser")
  quotedBids            Bid[]                @relation("Bid_user")
  createdAt             DateTime?            @default(now())
  updatedAt             DateTime?            @updatedAt
  magicAuthToken        String?
  magicAuthIssuedAt     DateTime?
  magicAuthRedeemedAt   DateTime?
}

model Event {
  id                 String           @id @default(cuid())
  name               String           @default("")
  seller             Seller?          @relation("Event_seller", fields: [sellerId], references: [id])
  sellerId           String?          @map("seller")
  eventType          EventType[]      @relation("Event_eventType")
  eventCategory      EventCategory?   @relation("Event_eventCategory", fields: [eventCategoryId], references: [id])
  eventCategoryId    String?          @map("eventCategory")
  location           Location?        @relation("Event_location", fields: [locationId], references: [id])
  locationId         String?          @map("location")
  vehicles           Vehicle[]        @relation("Vehicle_event")
  startDate          DateTime
  endDate            DateTime
  noOfBids           Int
  status             EventStatusType? @default(active)
  ExcelFile          ExcelUpload?     @relation("Event_ExcelFile", fields: [ExcelFileId], references: [id])
  ExcelFileId        String?          @unique @map("ExcelFile")
  termsAndConditions Json             @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  createdAt          DateTime?        @default(now())
  updatedAt          DateTime?        @updatedAt

  @@index([sellerId])
  @@index([eventCategoryId])
  @@index([locationId])
}

model Vehicle {
  id                  String                @id @default(cuid())
  registrationNumber  String                @default("")
  bidTimeExpire       String                @default("")
  currentBidAmount    Int?
  currentBidUser      User?                 @relation("Vehicle_currentBidUser", fields: [currentBidUserId], references: [id])
  currentBidUserId    String?               @map("currentBidUser")
  event               Event?                @relation("Vehicle_event", fields: [eventId], references: [id])
  eventId             String?               @map("event")
  bidStatus           VehicleBidStatusType? @default(pending)
  userVehicleBids     Bid[]                 @relation("Bid_bidVehicle")
  loanAgreementNo     String                @default("")
  registeredOwnerName String                @default("")
  make                String                @default("")
  model               String                @default("")
  varient             String                @default("")
  categoty            String                @default("")
  fuel                VehicleFuelType?
  type                String                @default("")
  rcStatus            String                @default("")
  yearOfManufacture   Int?
  ownership           Int?
  kmReading           Int?
  insuranceStatus     String                @default("")
  yardLocation        String                @default("")
  startPrice          Float?
  reservePrice        Float?
  repoDt              Int?
  veicleLocation      String                @default("")
  vehicleRemarks      String                @default("")
  auctionManager      String                @default("")
  actionManager       String                @default("")
  sellerName          String                @default("")
  parkingCharges      String                @default("")
  insurance           String                @default("")
  insuranceValidTill  String                @default("")
  tax                 String                @default("")
  fitness             String                @default("")
  permit              String                @default("")
  fitnessPermit       String                @default("")
  engineNo            String                @default("")
  chassisNo           String                @default("")
  frontImage          String                @default("")
  backImage           String                @default("")
  leftImage           String                @default("")
  rightImage          String                @default("")
  image5              String                @default("")
  image6              String                @default("")
  image7              String                @default("")
  image8              String                @default("")
  image9              String                @default("")
  image10             String                @default("")
  image11             String                @default("")
  image12             String                @default("")
  vehicleUsers        VehicleUser[]         @relation("VehicleUser_vehicle")
  ExcelFile           ExcelUpload?          @relation("Vehicle_ExcelFile", fields: [ExcelFileId], references: [id])
  ExcelFileId         String?               @map("ExcelFile")
  createdAt           DateTime?             @default(now())
  updatedAt           DateTime?             @updatedAt

  @@index([registrationNumber])
  @@index([currentBidUserId])
  @@index([eventId])
  @@index([ExcelFileId])
}

model VehicleUser {
  id              String           @id @default(cuid())
  name            String           @default("")
  vehicle         Vehicle?         @relation("VehicleUser_vehicle", fields: [vehicleId], references: [id])
  vehicleId       String?          @map("vehicle")
  user            User?            @relation("VehicleUser_user", fields: [userId], references: [id])
  userId          String?          @map("user")
  remainingBids   Int?
  bidCountUpdates BidCountUpdate[] @relation("BidCountUpdate_vehicleUser")
  createdAt       DateTime?        @default(now())
  updatedAt       DateTime?        @updatedAt

  @@index([vehicleId])
  @@index([userId])
}

model Bid {
  id           String    @id @default(cuid())
  name         String    @default("")
  amount       Int?
  user         User?     @relation("Bid_user", fields: [userId], references: [id])
  userId       String?   @map("user")
  bidVehicle   Vehicle?  @relation("Bid_bidVehicle", fields: [bidVehicleId], references: [id])
  bidVehicleId String?   @map("bidVehicle")
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @updatedAt

  @@index([userId])
  @@index([bidVehicleId])
}

model EventType {
  id        String    @id @default(cuid())
  name      String    @default("")
  events    Event[]   @relation("Event_eventType")
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Location {
  id        String    @id @default(cuid())
  name      String    @default("")
  country   String    @default("")
  state     State?    @relation("Location_state", fields: [stateId], references: [id])
  stateId   String?   @map("state")
  city      String    @default("")
  events    Event[]   @relation("Event_location")
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@index([stateId])
}

model State {
  id        String     @id @default(cuid())
  name      String     @default("")
  users     User[]     @relation("State_users")
  locations Location[] @relation("Location_state")
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt
}

model EventCategory {
  id        String    @id @default(cuid())
  name      String    @default("")
  events    Event[]   @relation("Event_eventCategory")
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model ExcelUpload {
  id            String    @id @default(cuid())
  name          String    @default("")
  file_filesize Int?
  file_filename String?
  event         Event?    @relation("Event_ExcelFile")
  vehicles      Vehicle[] @relation("Vehicle_ExcelFile")
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
}

model Seller {
  id        String    @id @default(cuid())
  name      String    @default("")
  events    Event[]   @relation("Event_seller")
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model BidCountUpdate {
  id                String       @id @default(cuid())
  vehicleUser       VehicleUser? @relation("BidCountUpdate_vehicleUser", fields: [vehicleUserId], references: [id])
  vehicleUserId     String?      @map("vehicleUser")
  incrementBidCount Int?         @default(5)
  createdFor        User?        @relation("BidCountUpdate_createdFor", fields: [createdForId], references: [id])
  createdForId      String?      @map("createdFor")
  createdAt         DateTime?    @default(now())
  updatedAt         DateTime?    @updatedAt

  @@index([vehicleUserId])
  @@index([createdForId])
}

enum UserIdProofTypeType {
  aadhar
  drivingLicense
  passport
}

enum UserRoleType {
  admin
  staff
  seller
  dealer
}

enum UserStatusType {
  pending
  blocked
  active
  inactive
}

enum EventStatusType {
  pending
  blocked
  active
  inactive
}

enum VehicleBidStatusType {
  pending
  blocked
  live
  closed
}

enum VehicleFuelType {
  diesel
  petrol
  cng
  lpg
  electric
}