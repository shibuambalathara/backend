# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  idNo: Int
  dealerId: String
  firstName: String
  lastName: String
  email: String
  username: String
  phone: String
  businessName: String
  category(
    where: EventTypeWhereInput! = {}
    orderBy: [EventTypeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [EventType!]
  categoryCount(where: EventTypeWhereInput! = {}): Int
  mobile: String
  password: PasswordState
  currentVehicleBuyingLimit: vehicleBuyingLimits
  vehicleBuyingLimit: Int
  specialVehicleBuyingLimit: Int
  image: ImageFieldOutput
  pancard: ImageFieldOutput
  pancardNo: String
  idProof: ImageFieldOutput
  idProofBack: ImageFieldOutput
  idProofType: UserIdProofTypeType
  idProofNo: String
  dealership: ImageFieldOutput
  country: String
  city: String
  role: UserRoleType
  watchList(
    where: VehicleWhereInput! = {}
    orderBy: [VehicleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Vehicle!]
  watchListCount(where: VehicleWhereInput! = {}): Int
  emdUpdates(
    where: EmdUpdateWhereInput! = {}
    orderBy: [EmdUpdateOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [EmdUpdate!]
  emdUpdatesCount(where: EmdUpdateWhereInput! = {}): Int
  payments(
    where: PaymentWhereInput! = {}
    orderBy: [PaymentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Payment!]
  paymentsCount(where: PaymentWhereInput! = {}): Int
  emdUpdatesByAdmin(
    where: EmdUpdateWhereInput! = {}
    orderBy: [EmdUpdateOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [EmdUpdate!]
  emdUpdatesByAdminCount(where: EmdUpdateWhereInput! = {}): Int
  status: UserStatusType
  state: String
  states(
    where: StateWhereInput! = {}
    orderBy: [StateOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [State!]
  statesCount(where: StateWhereInput! = {}): Int
  activeBids(
    where: VehicleWhereInput! = {}
    orderBy: [VehicleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Vehicle!]
  activeBidsCount(where: VehicleWhereInput! = {}): Int
  quotedBids(
    where: BidWhereInput! = {}
    orderBy: [BidOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Bid!]
  quotedBidsCount(where: BidWhereInput! = {}): Int
  bannedSellers(
    where: SellerWhereInput! = {}
    orderBy: [SellerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Seller!]
  bannedSellersCount(where: SellerWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  magicAuthToken: PasswordState
  magicAuthIssuedAt: DateTime
  magicAuthRedeemedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

type vehicleBuyingLimits {
  vehicleBuyingLimit: Int
  specialVehicleBuyingLimit: Int
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

enum UserIdProofTypeType {
  aadhar
  drivingLicense
  passport
}

enum UserRoleType {
  admin
  staff
  seller
  dealer
}

enum UserStatusType {
  pending
  blocked
  active
  inactive
}

scalar DateTime

input UserWhereUniqueInput {
  id: ID
  username: String
  mobile: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  idNo: IntFilter
  dealerId: StringFilter
  firstName: StringFilter
  lastName: StringFilter
  email: StringFilter
  username: StringFilter
  phone: StringFilter
  businessName: StringFilter
  category: EventTypeManyRelationFilter
  mobile: StringFilter
  password: PasswordFilter
  vehicleBuyingLimit: IntNullableFilter
  specialVehicleBuyingLimit: IntNullableFilter
  pancardNo: StringFilter
  idProofType: UserIdProofTypeTypeNullableFilter
  idProofNo: StringFilter
  country: StringFilter
  city: StringFilter
  role: UserRoleTypeNullableFilter
  watchList: VehicleManyRelationFilter
  emdUpdates: EmdUpdateManyRelationFilter
  payments: PaymentManyRelationFilter
  emdUpdatesByAdmin: EmdUpdateManyRelationFilter
  status: UserStatusTypeNullableFilter
  state: StringFilter
  states: StateManyRelationFilter
  activeBids: VehicleManyRelationFilter
  quotedBids: BidManyRelationFilter
  bannedSellers: SellerManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  magicAuthToken: PasswordFilter
  magicAuthIssuedAt: DateTimeNullableFilter
  magicAuthRedeemedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input EventTypeManyRelationFilter {
  every: EventTypeWhereInput
  some: EventTypeWhereInput
  none: EventTypeWhereInput
}

input PasswordFilter {
  isSet: Boolean!
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input UserIdProofTypeTypeNullableFilter {
  equals: UserIdProofTypeType
  in: [UserIdProofTypeType!]
  notIn: [UserIdProofTypeType!]
  not: UserIdProofTypeTypeNullableFilter
}

input UserRoleTypeNullableFilter {
  equals: UserRoleType
  in: [UserRoleType!]
  notIn: [UserRoleType!]
  not: UserRoleTypeNullableFilter
}

input VehicleManyRelationFilter {
  every: VehicleWhereInput
  some: VehicleWhereInput
  none: VehicleWhereInput
}

input EmdUpdateManyRelationFilter {
  every: EmdUpdateWhereInput
  some: EmdUpdateWhereInput
  none: EmdUpdateWhereInput
}

input PaymentManyRelationFilter {
  every: PaymentWhereInput
  some: PaymentWhereInput
  none: PaymentWhereInput
}

input UserStatusTypeNullableFilter {
  equals: UserStatusType
  in: [UserStatusType!]
  notIn: [UserStatusType!]
  not: UserStatusTypeNullableFilter
}

input StateManyRelationFilter {
  every: StateWhereInput
  some: StateWhereInput
  none: StateWhereInput
}

input BidManyRelationFilter {
  every: BidWhereInput
  some: BidWhereInput
  none: BidWhereInput
}

input SellerManyRelationFilter {
  every: SellerWhereInput
  some: SellerWhereInput
  none: SellerWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  idNo: OrderDirection
  dealerId: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  email: OrderDirection
  username: OrderDirection
  phone: OrderDirection
  businessName: OrderDirection
  mobile: OrderDirection
  vehicleBuyingLimit: OrderDirection
  specialVehicleBuyingLimit: OrderDirection
  pancardNo: OrderDirection
  idProofType: OrderDirection
  idProofNo: OrderDirection
  country: OrderDirection
  city: OrderDirection
  role: OrderDirection
  status: OrderDirection
  state: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  magicAuthIssuedAt: OrderDirection
  magicAuthRedeemedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  idNo: Int
  dealerId: String
  firstName: String
  lastName: String
  email: String
  username: String
  phone: String
  businessName: String
  category: EventTypeRelateToManyForUpdateInput
  mobile: String
  password: String
  vehicleBuyingLimit: Int
  specialVehicleBuyingLimit: Int
  image: ImageFieldInput
  pancard: ImageFieldInput
  pancardNo: String
  idProof: ImageFieldInput
  idProofBack: ImageFieldInput
  idProofType: UserIdProofTypeType
  idProofNo: String
  dealership: ImageFieldInput
  country: String
  city: String
  role: UserRoleType
  watchList: VehicleRelateToManyForUpdateInput
  emdUpdates: EmdUpdateRelateToManyForUpdateInput
  payments: PaymentRelateToManyForUpdateInput
  emdUpdatesByAdmin: EmdUpdateRelateToManyForUpdateInput
  status: UserStatusType
  state: String
  states: StateRelateToManyForUpdateInput
  activeBids: VehicleRelateToManyForUpdateInput
  quotedBids: BidRelateToManyForUpdateInput
  bannedSellers: SellerRelateToManyForUpdateInput
  magicAuthToken: String
  magicAuthIssuedAt: DateTime
  magicAuthRedeemedAt: DateTime
}

input EventTypeRelateToManyForUpdateInput {
  disconnect: [EventTypeWhereUniqueInput!]
  set: [EventTypeWhereUniqueInput!]
  create: [EventTypeCreateInput!]
  connect: [EventTypeWhereUniqueInput!]
}

input ImageFieldInput {
  upload: Upload!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input VehicleRelateToManyForUpdateInput {
  disconnect: [VehicleWhereUniqueInput!]
  set: [VehicleWhereUniqueInput!]
  create: [VehicleCreateInput!]
  connect: [VehicleWhereUniqueInput!]
}

input EmdUpdateRelateToManyForUpdateInput {
  disconnect: [EmdUpdateWhereUniqueInput!]
  set: [EmdUpdateWhereUniqueInput!]
  create: [EmdUpdateCreateInput!]
  connect: [EmdUpdateWhereUniqueInput!]
}

input PaymentRelateToManyForUpdateInput {
  disconnect: [PaymentWhereUniqueInput!]
  set: [PaymentWhereUniqueInput!]
  create: [PaymentCreateInput!]
  connect: [PaymentWhereUniqueInput!]
}

input StateRelateToManyForUpdateInput {
  disconnect: [StateWhereUniqueInput!]
  set: [StateWhereUniqueInput!]
  create: [StateCreateInput!]
  connect: [StateWhereUniqueInput!]
}

input BidRelateToManyForUpdateInput {
  disconnect: [BidWhereUniqueInput!]
  set: [BidWhereUniqueInput!]
  create: [BidCreateInput!]
  connect: [BidWhereUniqueInput!]
}

input SellerRelateToManyForUpdateInput {
  disconnect: [SellerWhereUniqueInput!]
  set: [SellerWhereUniqueInput!]
  create: [SellerCreateInput!]
  connect: [SellerWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  idNo: Int
  dealerId: String
  firstName: String
  lastName: String
  email: String
  username: String
  phone: String
  businessName: String
  category: EventTypeRelateToManyForCreateInput
  mobile: String
  password: String
  vehicleBuyingLimit: Int
  specialVehicleBuyingLimit: Int
  image: ImageFieldInput
  pancard: ImageFieldInput
  pancardNo: String
  idProof: ImageFieldInput
  idProofBack: ImageFieldInput
  idProofType: UserIdProofTypeType
  idProofNo: String
  dealership: ImageFieldInput
  country: String
  city: String
  role: UserRoleType
  watchList: VehicleRelateToManyForCreateInput
  emdUpdates: EmdUpdateRelateToManyForCreateInput
  payments: PaymentRelateToManyForCreateInput
  emdUpdatesByAdmin: EmdUpdateRelateToManyForCreateInput
  status: UserStatusType
  state: String
  states: StateRelateToManyForCreateInput
  activeBids: VehicleRelateToManyForCreateInput
  quotedBids: BidRelateToManyForCreateInput
  bannedSellers: SellerRelateToManyForCreateInput
  magicAuthToken: String
  magicAuthIssuedAt: DateTime
  magicAuthRedeemedAt: DateTime
}

input EventTypeRelateToManyForCreateInput {
  create: [EventTypeCreateInput!]
  connect: [EventTypeWhereUniqueInput!]
}

input VehicleRelateToManyForCreateInput {
  create: [VehicleCreateInput!]
  connect: [VehicleWhereUniqueInput!]
}

input EmdUpdateRelateToManyForCreateInput {
  create: [EmdUpdateCreateInput!]
  connect: [EmdUpdateWhereUniqueInput!]
}

input PaymentRelateToManyForCreateInput {
  create: [PaymentCreateInput!]
  connect: [PaymentWhereUniqueInput!]
}

input StateRelateToManyForCreateInput {
  create: [StateCreateInput!]
  connect: [StateWhereUniqueInput!]
}

input BidRelateToManyForCreateInput {
  create: [BidCreateInput!]
  connect: [BidWhereUniqueInput!]
}

input SellerRelateToManyForCreateInput {
  create: [SellerCreateInput!]
  connect: [SellerWhereUniqueInput!]
}

type Payment {
  id: ID!
  refNo: Int
  amount: Int
  paymentFor: String
  description: String
  status: String
  user: User
  image: ImageFieldOutput
  emdUpdate(
    where: EmdUpdateWhereInput! = {}
    orderBy: [EmdUpdateOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [EmdUpdate!]
  emdUpdateCount(where: EmdUpdateWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input PaymentWhereUniqueInput {
  id: ID
}

input PaymentWhereInput {
  AND: [PaymentWhereInput!]
  OR: [PaymentWhereInput!]
  NOT: [PaymentWhereInput!]
  id: IDFilter
  refNo: IntFilter
  amount: IntNullableFilter
  paymentFor: StringFilter
  description: StringFilter
  status: StringNullableFilter
  user: UserWhereInput
  emdUpdate: EmdUpdateManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input PaymentOrderByInput {
  id: OrderDirection
  refNo: OrderDirection
  amount: OrderDirection
  paymentFor: OrderDirection
  description: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PaymentUpdateInput {
  refNo: Int
  amount: Int
  paymentFor: String
  description: String
  status: String
  user: UserRelateToOneForUpdateInput
  image: ImageFieldInput
  emdUpdate: EmdUpdateRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input PaymentUpdateArgs {
  where: PaymentWhereUniqueInput!
  data: PaymentUpdateInput!
}

input PaymentCreateInput {
  refNo: Int
  amount: Int
  paymentFor: String
  description: String
  status: String
  user: UserRelateToOneForCreateInput
  image: ImageFieldInput
  emdUpdate: EmdUpdateRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type EmdUpdate {
  id: ID!
  emdNo: Int
  vehicleBuyingLimitIncrement: Int
  specialVehicleBuyingLimitIncrement: Int
  payment: Payment
  user: User
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
}

input EmdUpdateWhereUniqueInput {
  id: ID
}

input EmdUpdateWhereInput {
  AND: [EmdUpdateWhereInput!]
  OR: [EmdUpdateWhereInput!]
  NOT: [EmdUpdateWhereInput!]
  id: IDFilter
  emdNo: IntFilter
  vehicleBuyingLimitIncrement: IntNullableFilter
  specialVehicleBuyingLimitIncrement: IntNullableFilter
  payment: PaymentWhereInput
  user: UserWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
}

input EmdUpdateOrderByInput {
  id: OrderDirection
  emdNo: OrderDirection
  vehicleBuyingLimitIncrement: OrderDirection
  specialVehicleBuyingLimitIncrement: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input EmdUpdateUpdateInput {
  emdNo: Int
  vehicleBuyingLimitIncrement: Int
  specialVehicleBuyingLimitIncrement: Int
  payment: PaymentRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
  createdBy: UserRelateToOneForUpdateInput
}

input PaymentRelateToOneForUpdateInput {
  create: PaymentCreateInput
  connect: PaymentWhereUniqueInput
  disconnect: Boolean
}

input EmdUpdateUpdateArgs {
  where: EmdUpdateWhereUniqueInput!
  data: EmdUpdateUpdateInput!
}

input EmdUpdateCreateInput {
  emdNo: Int
  vehicleBuyingLimitIncrement: Int
  specialVehicleBuyingLimitIncrement: Int
  payment: PaymentRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
  createdBy: UserRelateToOneForCreateInput
}

input PaymentRelateToOneForCreateInput {
  create: PaymentCreateInput
  connect: PaymentWhereUniqueInput
}

type Event {
  id: ID!
  eventNo: Int
  eventCategory: String
  startDate: DateTime
  endDate: DateTime
  seller: Seller
  eventType(
    where: EventTypeWhereInput! = {}
    orderBy: [EventTypeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [EventType!]
  eventTypeCount(where: EventTypeWhereInput! = {}): Int
  Report: JSON
  location: Location
  vehicles(
    where: VehicleWhereInput! = {}
    orderBy: [VehicleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Vehicle!]
  vehiclesCount(where: VehicleWhereInput! = {}): Int
  noOfBids: Int
  status: EventStatusType
  ExcelFile: ExcelUpload
  downloadableFile: FileFieldOutput
  termsAndConditions: String
  createdAt: DateTime
  updatedAt: DateTime
  bidLock: EventBidLockType
  isSpecialEvent: Boolean
  extraTimeTrigerIn: Int
  extraTime: Int
  vehicleLiveTimeIn: Int
  gapInBetweenVehicles: Int
}

enum EventStatusType {
  pending
  blocked
  active
  inactive
  stop
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

enum EventBidLockType {
  locked
  unlocked
}

input EventWhereUniqueInput {
  id: ID
}

input EventWhereInput {
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
  id: IDFilter
  eventNo: IntFilter
  eventCategory: StringNullableFilter
  startDate: DateTimeFilter
  endDate: DateTimeFilter
  seller: SellerWhereInput
  eventType: EventTypeManyRelationFilter
  location: LocationWhereInput
  vehicles: VehicleManyRelationFilter
  noOfBids: IntFilter
  status: EventStatusTypeNullableFilter
  ExcelFile: ExcelUploadWhereInput
  termsAndConditions: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  bidLock: EventBidLockTypeNullableFilter
  isSpecialEvent: BooleanFilter
  extraTimeTrigerIn: IntNullableFilter
  extraTime: IntNullableFilter
  vehicleLiveTimeIn: IntNullableFilter
  gapInBetweenVehicles: IntNullableFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input EventStatusTypeNullableFilter {
  equals: EventStatusType
  in: [EventStatusType!]
  notIn: [EventStatusType!]
  not: EventStatusTypeNullableFilter
}

input EventBidLockTypeNullableFilter {
  equals: EventBidLockType
  in: [EventBidLockType!]
  notIn: [EventBidLockType!]
  not: EventBidLockTypeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input EventOrderByInput {
  id: OrderDirection
  eventNo: OrderDirection
  eventCategory: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  noOfBids: OrderDirection
  status: OrderDirection
  termsAndConditions: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  bidLock: OrderDirection
  isSpecialEvent: OrderDirection
  extraTimeTrigerIn: OrderDirection
  extraTime: OrderDirection
  vehicleLiveTimeIn: OrderDirection
  gapInBetweenVehicles: OrderDirection
}

input EventUpdateInput {
  eventNo: Int
  eventCategory: String
  startDate: DateTime
  endDate: DateTime
  seller: SellerRelateToOneForUpdateInput
  eventType: EventTypeRelateToManyForUpdateInput
  location: LocationRelateToOneForUpdateInput
  vehicles: VehicleRelateToManyForUpdateInput
  noOfBids: Int
  status: EventStatusType
  ExcelFile: ExcelUploadRelateToOneForUpdateInput
  downloadableFile: FileFieldInput
  termsAndConditions: String
  bidLock: EventBidLockType
  isSpecialEvent: Boolean
  extraTimeTrigerIn: Int
  extraTime: Int
  vehicleLiveTimeIn: Int
  gapInBetweenVehicles: Int
}

input SellerRelateToOneForUpdateInput {
  create: SellerCreateInput
  connect: SellerWhereUniqueInput
  disconnect: Boolean
}

input LocationRelateToOneForUpdateInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
  disconnect: Boolean
}

input ExcelUploadRelateToOneForUpdateInput {
  create: ExcelUploadCreateInput
  connect: ExcelUploadWhereUniqueInput
  disconnect: Boolean
}

input FileFieldInput {
  upload: Upload!
}

input EventUpdateArgs {
  where: EventWhereUniqueInput!
  data: EventUpdateInput!
}

input EventCreateInput {
  eventNo: Int
  eventCategory: String
  startDate: DateTime
  endDate: DateTime
  seller: SellerRelateToOneForCreateInput
  eventType: EventTypeRelateToManyForCreateInput
  location: LocationRelateToOneForCreateInput
  vehicles: VehicleRelateToManyForCreateInput
  noOfBids: Int
  status: EventStatusType
  ExcelFile: ExcelUploadRelateToOneForCreateInput
  downloadableFile: FileFieldInput
  termsAndConditions: String
  bidLock: EventBidLockType
  isSpecialEvent: Boolean
  extraTimeTrigerIn: Int
  extraTime: Int
  vehicleLiveTimeIn: Int
  gapInBetweenVehicles: Int
}

input SellerRelateToOneForCreateInput {
  create: SellerCreateInput
  connect: SellerWhereUniqueInput
}

input LocationRelateToOneForCreateInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
}

input ExcelUploadRelateToOneForCreateInput {
  create: ExcelUploadCreateInput
  connect: ExcelUploadWhereUniqueInput
}

type Vehicle {
  id: ID!
  vehicleIndexNo: Int
  registrationNumber: String
  bidTimeExpire: DateTime
  bidStartTime: DateTime
  bidAmountUpdate: Int
  currentBidAmount: Int
  myBidRank: Int
  totalBids: Int
  startBidAmount: Float
  currentBidUser: User
  event: Event
  vehicleEventStatus: vehicleEventStatus
  bidStatus: VehicleBidStatusType
  userVehicleBids(
    where: BidWhereInput! = {}
    orderBy: [BidOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Bid!]
  userVehicleBidsCount(where: BidWhereInput! = {}): Int
  loanAgreementNo: String
  registeredOwnerName: String
  quoteIncreament: Int
  make: String
  model: String
  varient: String
  categoty: String
  fuel: String
  type: String
  rcStatus: String
  yearOfManufacture: Int
  ownership: Int
  mileage: Int
  kmReading: Int
  insuranceStatus: String
  yardLocation: String
  startPrice: Float
  reservePrice: Float
  repoDt: DateTime
  veicleLocation: String
  vehicleRemarks: String
  auctionManager: String
  parkingCharges: String
  insurance: String
  insuranceValidTill: DateTime
  tax: String
  taxValidityDate: DateTime
  fitness: String
  permit: String
  fitnessPermit: String
  engineNo: String
  chassisNo: String
  frontImage: String
  backImage: String
  leftImage: String
  rightImage: String
  image5: String
  image6: String
  inspectionLink: String
  autobseContact: String
  autobse_contact_person: String
  vehicleCondition: String
  powerSteering: String
  shape: String
  color: String
  state: String
  city: String
  area: String
  paymentTerms: String
  dateOfRegistration: DateTime
  hypothication: String
  climateControl: String
  doorCount: Int
  gearBox: String
  buyerFees: String
  rtoFine: String
  parkingRate: String
  approxParkingCharges: String
  clientContactPerson: String
  clientContactNo: String
  additionalRemarks: String
  watchedBy(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  watchedByCount(where: UserWhereInput! = {}): Int
  ExcelFile: ExcelUpload
  createdAt: DateTime
  updatedAt: DateTime
}

enum vehicleEventStatus {
  completed
  upcoming
  live
  abnormal
}

enum VehicleBidStatusType {
  pending
  approved
  fulfilled
  declined
}

input VehicleWhereUniqueInput {
  id: ID
}

input VehicleWhereInput {
  AND: [VehicleWhereInput!]
  OR: [VehicleWhereInput!]
  NOT: [VehicleWhereInput!]
  id: IDFilter
  vehicleIndexNo: IntFilter
  registrationNumber: StringFilter
  bidTimeExpire: DateTimeFilter
  bidStartTime: DateTimeFilter
  bidAmountUpdate: IntNullableFilter
  currentBidAmount: IntNullableFilter
  startBidAmount: FloatNullableFilter
  currentBidUser: UserWhereInput
  event: EventWhereInput
  bidStatus: VehicleBidStatusTypeNullableFilter
  userVehicleBids: BidManyRelationFilter
  loanAgreementNo: StringFilter
  registeredOwnerName: StringFilter
  quoteIncreament: IntNullableFilter
  make: StringFilter
  model: StringFilter
  varient: StringFilter
  categoty: StringFilter
  fuel: StringFilter
  type: StringFilter
  rcStatus: StringFilter
  yearOfManufacture: IntNullableFilter
  ownership: IntNullableFilter
  mileage: IntNullableFilter
  kmReading: IntNullableFilter
  insuranceStatus: StringFilter
  yardLocation: StringFilter
  startPrice: FloatNullableFilter
  reservePrice: FloatNullableFilter
  repoDt: DateTimeNullableFilter
  veicleLocation: StringFilter
  vehicleRemarks: StringFilter
  auctionManager: StringFilter
  parkingCharges: StringFilter
  insurance: StringFilter
  insuranceValidTill: DateTimeNullableFilter
  tax: StringFilter
  taxValidityDate: DateTimeNullableFilter
  fitness: StringFilter
  permit: StringFilter
  fitnessPermit: StringFilter
  engineNo: StringFilter
  chassisNo: StringFilter
  frontImage: StringFilter
  backImage: StringFilter
  leftImage: StringFilter
  rightImage: StringFilter
  image5: StringFilter
  image6: StringFilter
  inspectionLink: StringFilter
  autobseContact: StringFilter
  autobse_contact_person: StringFilter
  vehicleCondition: StringFilter
  powerSteering: StringFilter
  shape: StringFilter
  color: StringFilter
  state: StringFilter
  city: StringFilter
  area: StringFilter
  paymentTerms: StringFilter
  dateOfRegistration: DateTimeNullableFilter
  hypothication: StringFilter
  climateControl: StringFilter
  doorCount: IntNullableFilter
  gearBox: StringFilter
  buyerFees: StringFilter
  rtoFine: StringFilter
  parkingRate: StringFilter
  approxParkingCharges: StringFilter
  clientContactPerson: StringFilter
  clientContactNo: StringFilter
  additionalRemarks: StringFilter
  watchedBy: UserManyRelationFilter
  ExcelFile: ExcelUploadWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input VehicleBidStatusTypeNullableFilter {
  equals: VehicleBidStatusType
  in: [VehicleBidStatusType!]
  notIn: [VehicleBidStatusType!]
  not: VehicleBidStatusTypeNullableFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input VehicleOrderByInput {
  id: OrderDirection
  vehicleIndexNo: OrderDirection
  registrationNumber: OrderDirection
  bidTimeExpire: OrderDirection
  bidStartTime: OrderDirection
  bidAmountUpdate: OrderDirection
  currentBidAmount: OrderDirection
  startBidAmount: OrderDirection
  bidStatus: OrderDirection
  loanAgreementNo: OrderDirection
  registeredOwnerName: OrderDirection
  quoteIncreament: OrderDirection
  make: OrderDirection
  model: OrderDirection
  varient: OrderDirection
  categoty: OrderDirection
  fuel: OrderDirection
  type: OrderDirection
  rcStatus: OrderDirection
  yearOfManufacture: OrderDirection
  ownership: OrderDirection
  mileage: OrderDirection
  kmReading: OrderDirection
  insuranceStatus: OrderDirection
  yardLocation: OrderDirection
  startPrice: OrderDirection
  reservePrice: OrderDirection
  repoDt: OrderDirection
  veicleLocation: OrderDirection
  vehicleRemarks: OrderDirection
  auctionManager: OrderDirection
  parkingCharges: OrderDirection
  insurance: OrderDirection
  insuranceValidTill: OrderDirection
  tax: OrderDirection
  taxValidityDate: OrderDirection
  fitness: OrderDirection
  permit: OrderDirection
  fitnessPermit: OrderDirection
  engineNo: OrderDirection
  chassisNo: OrderDirection
  frontImage: OrderDirection
  backImage: OrderDirection
  leftImage: OrderDirection
  rightImage: OrderDirection
  image5: OrderDirection
  image6: OrderDirection
  inspectionLink: OrderDirection
  autobseContact: OrderDirection
  autobse_contact_person: OrderDirection
  vehicleCondition: OrderDirection
  powerSteering: OrderDirection
  shape: OrderDirection
  color: OrderDirection
  state: OrderDirection
  city: OrderDirection
  area: OrderDirection
  paymentTerms: OrderDirection
  dateOfRegistration: OrderDirection
  hypothication: OrderDirection
  climateControl: OrderDirection
  doorCount: OrderDirection
  gearBox: OrderDirection
  buyerFees: OrderDirection
  rtoFine: OrderDirection
  parkingRate: OrderDirection
  approxParkingCharges: OrderDirection
  clientContactPerson: OrderDirection
  clientContactNo: OrderDirection
  additionalRemarks: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input VehicleUpdateInput {
  vehicleIndexNo: Int
  registrationNumber: String
  bidTimeExpire: DateTime
  bidStartTime: DateTime
  bidAmountUpdate: Int
  currentBidAmount: Int
  startBidAmount: Float
  currentBidUser: UserRelateToOneForUpdateInput
  event: EventRelateToOneForUpdateInput
  bidStatus: VehicleBidStatusType
  userVehicleBids: BidRelateToManyForUpdateInput
  loanAgreementNo: String
  registeredOwnerName: String
  quoteIncreament: Int
  make: String
  model: String
  varient: String
  categoty: String
  fuel: String
  type: String
  rcStatus: String
  yearOfManufacture: Int
  ownership: Int
  mileage: Int
  kmReading: Int
  insuranceStatus: String
  yardLocation: String
  startPrice: Float
  reservePrice: Float
  repoDt: DateTime
  veicleLocation: String
  vehicleRemarks: String
  auctionManager: String
  parkingCharges: String
  insurance: String
  insuranceValidTill: DateTime
  tax: String
  taxValidityDate: DateTime
  fitness: String
  permit: String
  fitnessPermit: String
  engineNo: String
  chassisNo: String
  frontImage: String
  backImage: String
  leftImage: String
  rightImage: String
  image5: String
  image6: String
  inspectionLink: String
  autobseContact: String
  autobse_contact_person: String
  vehicleCondition: String
  powerSteering: String
  shape: String
  color: String
  state: String
  city: String
  area: String
  paymentTerms: String
  dateOfRegistration: DateTime
  hypothication: String
  climateControl: String
  doorCount: Int
  gearBox: String
  buyerFees: String
  rtoFine: String
  parkingRate: String
  approxParkingCharges: String
  clientContactPerson: String
  clientContactNo: String
  additionalRemarks: String
  watchedBy: UserRelateToManyForUpdateInput
  ExcelFile: ExcelUploadRelateToOneForUpdateInput
}

input EventRelateToOneForUpdateInput {
  create: EventCreateInput
  connect: EventWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input VehicleUpdateArgs {
  where: VehicleWhereUniqueInput!
  data: VehicleUpdateInput!
}

input VehicleCreateInput {
  vehicleIndexNo: Int
  registrationNumber: String
  bidTimeExpire: DateTime
  bidStartTime: DateTime
  bidAmountUpdate: Int
  currentBidAmount: Int
  startBidAmount: Float
  currentBidUser: UserRelateToOneForCreateInput
  event: EventRelateToOneForCreateInput
  bidStatus: VehicleBidStatusType
  userVehicleBids: BidRelateToManyForCreateInput
  loanAgreementNo: String
  registeredOwnerName: String
  quoteIncreament: Int
  make: String
  model: String
  varient: String
  categoty: String
  fuel: String
  type: String
  rcStatus: String
  yearOfManufacture: Int
  ownership: Int
  mileage: Int
  kmReading: Int
  insuranceStatus: String
  yardLocation: String
  startPrice: Float
  reservePrice: Float
  repoDt: DateTime
  veicleLocation: String
  vehicleRemarks: String
  auctionManager: String
  parkingCharges: String
  insurance: String
  insuranceValidTill: DateTime
  tax: String
  taxValidityDate: DateTime
  fitness: String
  permit: String
  fitnessPermit: String
  engineNo: String
  chassisNo: String
  frontImage: String
  backImage: String
  leftImage: String
  rightImage: String
  image5: String
  image6: String
  inspectionLink: String
  autobseContact: String
  autobse_contact_person: String
  vehicleCondition: String
  powerSteering: String
  shape: String
  color: String
  state: String
  city: String
  area: String
  paymentTerms: String
  dateOfRegistration: DateTime
  hypothication: String
  climateControl: String
  doorCount: Int
  gearBox: String
  buyerFees: String
  rtoFine: String
  parkingRate: String
  approxParkingCharges: String
  clientContactPerson: String
  clientContactNo: String
  additionalRemarks: String
  watchedBy: UserRelateToManyForCreateInput
  ExcelFile: ExcelUploadRelateToOneForCreateInput
}

input EventRelateToOneForCreateInput {
  create: EventCreateInput
  connect: EventWhereUniqueInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Bid {
  id: ID!
  name: String
  amount: Int
  user: User
  bidVehicle: Vehicle
  createdAt: DateTime
  updatedAt: DateTime
}

input BidWhereUniqueInput {
  id: ID
}

input BidWhereInput {
  AND: [BidWhereInput!]
  OR: [BidWhereInput!]
  NOT: [BidWhereInput!]
  id: IDFilter
  name: StringFilter
  amount: IntNullableFilter
  user: UserWhereInput
  bidVehicle: VehicleWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input BidOrderByInput {
  id: OrderDirection
  name: OrderDirection
  amount: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input BidUpdateInput {
  name: String
  amount: Int
  user: UserRelateToOneForUpdateInput
  bidVehicle: VehicleRelateToOneForUpdateInput
}

input VehicleRelateToOneForUpdateInput {
  create: VehicleCreateInput
  connect: VehicleWhereUniqueInput
  disconnect: Boolean
}

input BidUpdateArgs {
  where: BidWhereUniqueInput!
  data: BidUpdateInput!
}

input BidCreateInput {
  name: String
  amount: Int
  user: UserRelateToOneForCreateInput
  bidVehicle: VehicleRelateToOneForCreateInput
}

input VehicleRelateToOneForCreateInput {
  create: VehicleCreateInput
  connect: VehicleWhereUniqueInput
}

type EventType {
  id: ID!
  name: String
  events(
    where: EventWhereInput! = {}
    orderBy: [EventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  users: User
  createdAt: DateTime
  updatedAt: DateTime
}

input EventTypeWhereUniqueInput {
  id: ID
}

input EventTypeWhereInput {
  AND: [EventTypeWhereInput!]
  OR: [EventTypeWhereInput!]
  NOT: [EventTypeWhereInput!]
  id: IDFilter
  name: StringFilter
  events: EventManyRelationFilter
  users: UserWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input EventManyRelationFilter {
  every: EventWhereInput
  some: EventWhereInput
  none: EventWhereInput
}

input EventTypeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input EventTypeUpdateInput {
  name: String
  events: EventRelateToManyForUpdateInput
  users: UserRelateToOneForUpdateInput
}

input EventRelateToManyForUpdateInput {
  disconnect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

input EventTypeUpdateArgs {
  where: EventTypeWhereUniqueInput!
  data: EventTypeUpdateInput!
}

input EventTypeCreateInput {
  name: String
  events: EventRelateToManyForCreateInput
  users: UserRelateToOneForCreateInput
}

input EventRelateToManyForCreateInput {
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

type Location {
  id: ID!
  name: String
  country: String
  state: State
  city: String
  events(
    where: EventWhereInput! = {}
    orderBy: [EventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input LocationWhereUniqueInput {
  id: ID
}

input LocationWhereInput {
  AND: [LocationWhereInput!]
  OR: [LocationWhereInput!]
  NOT: [LocationWhereInput!]
  id: IDFilter
  name: StringFilter
  country: StringFilter
  state: StateWhereInput
  city: StringFilter
  events: EventManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input LocationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  country: OrderDirection
  city: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input LocationUpdateInput {
  name: String
  country: String
  state: StateRelateToOneForUpdateInput
  city: String
  events: EventRelateToManyForUpdateInput
}

input StateRelateToOneForUpdateInput {
  create: StateCreateInput
  connect: StateWhereUniqueInput
  disconnect: Boolean
}

input LocationUpdateArgs {
  where: LocationWhereUniqueInput!
  data: LocationUpdateInput!
}

input LocationCreateInput {
  name: String
  country: String
  state: StateRelateToOneForCreateInput
  city: String
  events: EventRelateToManyForCreateInput
}

input StateRelateToOneForCreateInput {
  create: StateCreateInput
  connect: StateWhereUniqueInput
}

type State {
  id: ID!
  name: String
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  locations(
    where: LocationWhereInput! = {}
    orderBy: [LocationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Location!]
  locationsCount(where: LocationWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input StateWhereUniqueInput {
  id: ID
}

input StateWhereInput {
  AND: [StateWhereInput!]
  OR: [StateWhereInput!]
  NOT: [StateWhereInput!]
  id: IDFilter
  name: StringFilter
  users: UserManyRelationFilter
  locations: LocationManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input LocationManyRelationFilter {
  every: LocationWhereInput
  some: LocationWhereInput
  none: LocationWhereInput
}

input StateOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input StateUpdateInput {
  name: String
  users: UserRelateToManyForUpdateInput
  locations: LocationRelateToManyForUpdateInput
}

input LocationRelateToManyForUpdateInput {
  disconnect: [LocationWhereUniqueInput!]
  set: [LocationWhereUniqueInput!]
  create: [LocationCreateInput!]
  connect: [LocationWhereUniqueInput!]
}

input StateUpdateArgs {
  where: StateWhereUniqueInput!
  data: StateUpdateInput!
}

input StateCreateInput {
  name: String
  users: UserRelateToManyForCreateInput
  locations: LocationRelateToManyForCreateInput
}

input LocationRelateToManyForCreateInput {
  create: [LocationCreateInput!]
  connect: [LocationWhereUniqueInput!]
}

type ExcelUpload {
  id: ID!
  name: String
  file: FileFieldOutput
  event: Event
  vehicles(
    where: VehicleWhereInput! = {}
    orderBy: [VehicleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Vehicle!]
  vehiclesCount(where: VehicleWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ExcelUploadWhereUniqueInput {
  id: ID
}

input ExcelUploadWhereInput {
  AND: [ExcelUploadWhereInput!]
  OR: [ExcelUploadWhereInput!]
  NOT: [ExcelUploadWhereInput!]
  id: IDFilter
  name: StringFilter
  event: EventWhereInput
  vehicles: VehicleManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ExcelUploadOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ExcelUploadUpdateInput {
  name: String
  file: FileFieldInput
  event: EventRelateToOneForUpdateInput
  vehicles: VehicleRelateToManyForUpdateInput
}

input ExcelUploadUpdateArgs {
  where: ExcelUploadWhereUniqueInput!
  data: ExcelUploadUpdateInput!
}

input ExcelUploadCreateInput {
  name: String
  file: FileFieldInput
  event: EventRelateToOneForCreateInput
  vehicles: VehicleRelateToManyForCreateInput
}

type Seller {
  id: ID!
  name: String
  events(
    where: EventWhereInput! = {}
    orderBy: [EventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  bannedUsers(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  bannedUsersCount(where: UserWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input SellerWhereUniqueInput {
  id: ID
}

input SellerWhereInput {
  AND: [SellerWhereInput!]
  OR: [SellerWhereInput!]
  NOT: [SellerWhereInput!]
  id: IDFilter
  name: StringFilter
  events: EventManyRelationFilter
  bannedUsers: UserManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input SellerOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SellerUpdateInput {
  name: String
  events: EventRelateToManyForUpdateInput
  bannedUsers: UserRelateToManyForUpdateInput
}

input SellerUpdateArgs {
  where: SellerWhereUniqueInput!
  data: SellerUpdateInput!
}

input SellerCreateInput {
  name: String
  events: EventRelateToManyForCreateInput
  bannedUsers: UserRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPayment(data: PaymentCreateInput!): Payment
  createPayments(data: [PaymentCreateInput!]!): [Payment]
  updatePayment(
    where: PaymentWhereUniqueInput!
    data: PaymentUpdateInput!
  ): Payment
  updatePayments(data: [PaymentUpdateArgs!]!): [Payment]
  deletePayment(where: PaymentWhereUniqueInput!): Payment
  deletePayments(where: [PaymentWhereUniqueInput!]!): [Payment]
  createEmdUpdate(data: EmdUpdateCreateInput!): EmdUpdate
  createEmdUpdates(data: [EmdUpdateCreateInput!]!): [EmdUpdate]
  updateEmdUpdate(
    where: EmdUpdateWhereUniqueInput!
    data: EmdUpdateUpdateInput!
  ): EmdUpdate
  updateEmdUpdates(data: [EmdUpdateUpdateArgs!]!): [EmdUpdate]
  deleteEmdUpdate(where: EmdUpdateWhereUniqueInput!): EmdUpdate
  deleteEmdUpdates(where: [EmdUpdateWhereUniqueInput!]!): [EmdUpdate]
  createEvent(data: EventCreateInput!): Event
  createEvents(data: [EventCreateInput!]!): [Event]
  updateEvent(where: EventWhereUniqueInput!, data: EventUpdateInput!): Event
  updateEvents(data: [EventUpdateArgs!]!): [Event]
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteEvents(where: [EventWhereUniqueInput!]!): [Event]
  createVehicle(data: VehicleCreateInput!): Vehicle
  createVehicles(data: [VehicleCreateInput!]!): [Vehicle]
  updateVehicle(
    where: VehicleWhereUniqueInput!
    data: VehicleUpdateInput!
  ): Vehicle
  updateVehicles(data: [VehicleUpdateArgs!]!): [Vehicle]
  deleteVehicle(where: VehicleWhereUniqueInput!): Vehicle
  deleteVehicles(where: [VehicleWhereUniqueInput!]!): [Vehicle]
  createBid(data: BidCreateInput!): Bid
  createBids(data: [BidCreateInput!]!): [Bid]
  updateBid(where: BidWhereUniqueInput!, data: BidUpdateInput!): Bid
  updateBids(data: [BidUpdateArgs!]!): [Bid]
  deleteBid(where: BidWhereUniqueInput!): Bid
  deleteBids(where: [BidWhereUniqueInput!]!): [Bid]
  createEventType(data: EventTypeCreateInput!): EventType
  createEventTypes(data: [EventTypeCreateInput!]!): [EventType]
  updateEventType(
    where: EventTypeWhereUniqueInput!
    data: EventTypeUpdateInput!
  ): EventType
  updateEventTypes(data: [EventTypeUpdateArgs!]!): [EventType]
  deleteEventType(where: EventTypeWhereUniqueInput!): EventType
  deleteEventTypes(where: [EventTypeWhereUniqueInput!]!): [EventType]
  createLocation(data: LocationCreateInput!): Location
  createLocations(data: [LocationCreateInput!]!): [Location]
  updateLocation(
    where: LocationWhereUniqueInput!
    data: LocationUpdateInput!
  ): Location
  updateLocations(data: [LocationUpdateArgs!]!): [Location]
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deleteLocations(where: [LocationWhereUniqueInput!]!): [Location]
  createState(data: StateCreateInput!): State
  createStates(data: [StateCreateInput!]!): [State]
  updateState(where: StateWhereUniqueInput!, data: StateUpdateInput!): State
  updateStates(data: [StateUpdateArgs!]!): [State]
  deleteState(where: StateWhereUniqueInput!): State
  deleteStates(where: [StateWhereUniqueInput!]!): [State]
  createExcelUpload(data: ExcelUploadCreateInput!): ExcelUpload
  createExcelUploads(data: [ExcelUploadCreateInput!]!): [ExcelUpload]
  updateExcelUpload(
    where: ExcelUploadWhereUniqueInput!
    data: ExcelUploadUpdateInput!
  ): ExcelUpload
  updateExcelUploads(data: [ExcelUploadUpdateArgs!]!): [ExcelUpload]
  deleteExcelUpload(where: ExcelUploadWhereUniqueInput!): ExcelUpload
  deleteExcelUploads(where: [ExcelUploadWhereUniqueInput!]!): [ExcelUpload]
  createSeller(data: SellerCreateInput!): Seller
  createSellers(data: [SellerCreateInput!]!): [Seller]
  updateSeller(where: SellerWhereUniqueInput!, data: SellerUpdateInput!): Seller
  updateSellers(data: [SellerUpdateArgs!]!): [Seller]
  deleteSeller(where: SellerWhereUniqueInput!): Seller
  deleteSellers(where: [SellerWhereUniqueInput!]!): [Seller]
  endSession: Boolean!
  authenticateUserWithPassword(
    mobile: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  sendUserMagicAuthLink(mobile: String!): Boolean!
  redeemUserMagicAuthToken(
    mobile: String!
    token: String!
  ): RedeemUserMagicAuthTokenResult!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  firstName: String
  lastName: String
  mobile: String
  password: String
}

union RedeemUserMagicAuthTokenResult =
    RedeemUserMagicAuthTokenSuccess
  | RedeemUserMagicAuthTokenFailure

type RedeemUserMagicAuthTokenSuccess {
  token: String!
  item: User!
}

type RedeemUserMagicAuthTokenFailure {
  code: MagicLinkRedemptionErrorCode!
  message: String!
}

enum MagicLinkRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  payments(
    where: PaymentWhereInput! = {}
    orderBy: [PaymentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Payment!]
  payment(where: PaymentWhereUniqueInput!): Payment
  paymentsCount(where: PaymentWhereInput! = {}): Int
  emdUpdates(
    where: EmdUpdateWhereInput! = {}
    orderBy: [EmdUpdateOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [EmdUpdate!]
  emdUpdate(where: EmdUpdateWhereUniqueInput!): EmdUpdate
  emdUpdatesCount(where: EmdUpdateWhereInput! = {}): Int
  events(
    where: EventWhereInput! = {}
    orderBy: [EventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Event!]
  event(where: EventWhereUniqueInput!): Event
  eventsCount(where: EventWhereInput! = {}): Int
  vehicles(
    where: VehicleWhereInput! = {}
    orderBy: [VehicleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Vehicle!]
  vehicle(where: VehicleWhereUniqueInput!): Vehicle
  vehiclesCount(where: VehicleWhereInput! = {}): Int
  bids(
    where: BidWhereInput! = {}
    orderBy: [BidOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Bid!]
  bid(where: BidWhereUniqueInput!): Bid
  bidsCount(where: BidWhereInput! = {}): Int
  eventTypes(
    where: EventTypeWhereInput! = {}
    orderBy: [EventTypeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [EventType!]
  eventType(where: EventTypeWhereUniqueInput!): EventType
  eventTypesCount(where: EventTypeWhereInput! = {}): Int
  locations(
    where: LocationWhereInput! = {}
    orderBy: [LocationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Location!]
  location(where: LocationWhereUniqueInput!): Location
  locationsCount(where: LocationWhereInput! = {}): Int
  states(
    where: StateWhereInput! = {}
    orderBy: [StateOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [State!]
  state(where: StateWhereUniqueInput!): State
  statesCount(where: StateWhereInput! = {}): Int
  excelUploads(
    where: ExcelUploadWhereInput! = {}
    orderBy: [ExcelUploadOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ExcelUpload!]
  excelUpload(where: ExcelUploadWhereUniqueInput!): ExcelUpload
  excelUploadsCount(where: ExcelUploadWhereInput! = {}): Int
  sellers(
    where: SellerWhereInput! = {}
    orderBy: [SellerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Seller!]
  seller(where: SellerWhereUniqueInput!): Seller
  sellersCount(where: SellerWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem

  """
  Live Events
  """
  liveEvents(
    where: EventWhereInput
    orderBy: [EventOrderByInput] = [{ createdAt: desc }]
    take: Int! = 10
    skip: Int! = 0
  ): [Event]

  """
  Upcoming Events
  """
  upcomingEvents(
    where: EventWhereInput
    orderBy: [EventOrderByInput] = [{ startDate: asc }]
    take: Int! = 10
    skip: Int! = 0
  ): [Event]

  """
  complied Events
  """
  compliedEvents(
    where: EventWhereInput
    orderBy: [EventOrderByInput] = [{ startDate: asc }]
    take: Int! = 10
    skip: Int! = 0
  ): [Event]

  """
  Server Time
  """
  time: String

  """
  User Pan Cards Count
  """
  sudoUsersCount(where: UserWhereInput): Int

  """
  Bid History for open auction
  """
  sudoBids(
    where: BidWhereInput
    orderBy: [BidOrderByInput] = [{ createdAt: desc }]
    take: Int! = 10
    skip: Int! = 0
  ): [BidHistory]
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}

"""
A custom Bid History for Vehicle
"""
type BidHistory {
  id: ID!
  name: String
  amount: Int
  userId: String
  createdAt: DateTime
}

type Time {
  iso: String!
}

type Subscription {
  time: Time

  """
  New Live Bids
  """
  liveBid(id: ID!): Bid
}
