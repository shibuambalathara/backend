# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  firstName: String
  lastName: String
  email: String
  username: String
  phone: String
  mobile: String
  password: PasswordState
  image: ImageFieldOutput
  pancard: ImageFieldOutput
  pancardNo: String
  idProof: ImageFieldOutput
  idProofType: UserIdProofTypeType
  idProofNo: String
  dealership: ImageFieldOutput
  country: String
  state: String
  city: String
  role(
    where: RoleWhereInput! = {}
    orderBy: [RoleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Role!]
  roleCount(where: RoleWhereInput! = {}): Int
  status: UserStatusType
  userEvents(
    where: EventUserWhereInput! = {}
    orderBy: [EventUserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [EventUser!]
  userEventsCount(where: EventUserWhereInput! = {}): Int
  bidCountUpdates(
    where: BidCountUpdateWhereInput! = {}
    orderBy: [BidCountUpdateOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [BidCountUpdate!]
  bidCountUpdatesCount(where: BidCountUpdateWhereInput! = {}): Int
  activeBids(
    where: BidWhereInput! = {}
    orderBy: [BidOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Bid!]
  activeBidsCount(where: BidWhereInput! = {}): Int
  quotedBids(
    where: UserBidWhereInput! = {}
    orderBy: [UserBidOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [UserBid!]
  quotedBidsCount(where: UserBidWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  magicAuthToken: PasswordState
  magicAuthIssuedAt: DateTime
  magicAuthRedeemedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

enum UserIdProofTypeType {
  aadhar
  drivingLicense
  passport
}

enum UserStatusType {
  pending
  blocked
  active
  inactive
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  username: String
  mobile: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  firstName: StringFilter
  lastName: StringFilter
  email: StringFilter
  username: StringFilter
  phone: StringFilter
  mobile: StringFilter
  password: PasswordFilter
  pancardNo: StringFilter
  idProofType: UserIdProofTypeTypeNullableFilter
  idProofNo: StringFilter
  country: StringFilter
  state: StringFilter
  city: StringFilter
  role: RoleManyRelationFilter
  status: UserStatusTypeNullableFilter
  userEvents: EventUserManyRelationFilter
  bidCountUpdates: BidCountUpdateManyRelationFilter
  activeBids: BidManyRelationFilter
  quotedBids: UserBidManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  magicAuthToken: PasswordFilter
  magicAuthIssuedAt: DateTimeNullableFilter
  magicAuthRedeemedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input UserIdProofTypeTypeNullableFilter {
  equals: UserIdProofTypeType
  in: [UserIdProofTypeType!]
  notIn: [UserIdProofTypeType!]
  not: UserIdProofTypeTypeNullableFilter
}

input RoleManyRelationFilter {
  every: RoleWhereInput
  some: RoleWhereInput
  none: RoleWhereInput
}

input UserStatusTypeNullableFilter {
  equals: UserStatusType
  in: [UserStatusType!]
  notIn: [UserStatusType!]
  not: UserStatusTypeNullableFilter
}

input EventUserManyRelationFilter {
  every: EventUserWhereInput
  some: EventUserWhereInput
  none: EventUserWhereInput
}

input BidCountUpdateManyRelationFilter {
  every: BidCountUpdateWhereInput
  some: BidCountUpdateWhereInput
  none: BidCountUpdateWhereInput
}

input BidManyRelationFilter {
  every: BidWhereInput
  some: BidWhereInput
  none: BidWhereInput
}

input UserBidManyRelationFilter {
  every: UserBidWhereInput
  some: UserBidWhereInput
  none: UserBidWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  email: OrderDirection
  username: OrderDirection
  phone: OrderDirection
  mobile: OrderDirection
  pancardNo: OrderDirection
  idProofType: OrderDirection
  idProofNo: OrderDirection
  country: OrderDirection
  state: OrderDirection
  city: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  magicAuthIssuedAt: OrderDirection
  magicAuthRedeemedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  firstName: String
  lastName: String
  email: String
  username: String
  phone: String
  mobile: String
  password: String
  image: ImageFieldInput
  pancard: ImageFieldInput
  pancardNo: String
  idProof: ImageFieldInput
  idProofType: UserIdProofTypeType
  idProofNo: String
  dealership: ImageFieldInput
  country: String
  state: String
  city: String
  role: RoleRelateToManyForUpdateInput
  status: UserStatusType
  userEvents: EventUserRelateToManyForUpdateInput
  bidCountUpdates: BidCountUpdateRelateToManyForUpdateInput
  activeBids: BidRelateToManyForUpdateInput
  quotedBids: UserBidRelateToManyForUpdateInput
  magicAuthToken: String
  magicAuthIssuedAt: DateTime
  magicAuthRedeemedAt: DateTime
}

input ImageFieldInput {
  upload: Upload!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input RoleRelateToManyForUpdateInput {
  disconnect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  create: [RoleCreateInput!]
  connect: [RoleWhereUniqueInput!]
}

input EventUserRelateToManyForUpdateInput {
  disconnect: [EventUserWhereUniqueInput!]
  set: [EventUserWhereUniqueInput!]
  create: [EventUserCreateInput!]
  connect: [EventUserWhereUniqueInput!]
}

input BidCountUpdateRelateToManyForUpdateInput {
  disconnect: [BidCountUpdateWhereUniqueInput!]
  set: [BidCountUpdateWhereUniqueInput!]
  create: [BidCountUpdateCreateInput!]
  connect: [BidCountUpdateWhereUniqueInput!]
}

input BidRelateToManyForUpdateInput {
  disconnect: [BidWhereUniqueInput!]
  set: [BidWhereUniqueInput!]
  create: [BidCreateInput!]
  connect: [BidWhereUniqueInput!]
}

input UserBidRelateToManyForUpdateInput {
  disconnect: [UserBidWhereUniqueInput!]
  set: [UserBidWhereUniqueInput!]
  create: [UserBidCreateInput!]
  connect: [UserBidWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  firstName: String
  lastName: String
  email: String
  username: String
  phone: String
  mobile: String
  password: String
  image: ImageFieldInput
  pancard: ImageFieldInput
  pancardNo: String
  idProof: ImageFieldInput
  idProofType: UserIdProofTypeType
  idProofNo: String
  dealership: ImageFieldInput
  country: String
  state: String
  city: String
  role: RoleRelateToManyForCreateInput
  status: UserStatusType
  userEvents: EventUserRelateToManyForCreateInput
  bidCountUpdates: BidCountUpdateRelateToManyForCreateInput
  activeBids: BidRelateToManyForCreateInput
  quotedBids: UserBidRelateToManyForCreateInput
  magicAuthToken: String
  magicAuthIssuedAt: DateTime
  magicAuthRedeemedAt: DateTime
}

input RoleRelateToManyForCreateInput {
  create: [RoleCreateInput!]
  connect: [RoleWhereUniqueInput!]
}

input EventUserRelateToManyForCreateInput {
  create: [EventUserCreateInput!]
  connect: [EventUserWhereUniqueInput!]
}

input BidCountUpdateRelateToManyForCreateInput {
  create: [BidCountUpdateCreateInput!]
  connect: [BidCountUpdateWhereUniqueInput!]
}

input BidRelateToManyForCreateInput {
  create: [BidCreateInput!]
  connect: [BidWhereUniqueInput!]
}

input UserBidRelateToManyForCreateInput {
  create: [UserBidCreateInput!]
  connect: [UserBidWhereUniqueInput!]
}

type Event {
  id: ID!
  seller: Seller
  eventType: EventType
  eventCategory: EventCategory
  location: Location
  vehicles(
    where: VehicleWhereInput! = {}
    orderBy: [VehicleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Vehicle!]
  vehiclesCount(where: VehicleWhereInput! = {}): Int
  startDate: DateTime
  endDate: DateTime
  noOfBids: Int
  status: EventStatusType
  eventUsers(
    where: EventUserWhereInput! = {}
    orderBy: [EventUserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [EventUser!]
  eventUsersCount(where: EventUserWhereInput! = {}): Int
  bids(
    where: BidWhereInput! = {}
    orderBy: [BidOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Bid!]
  bidsCount(where: BidWhereInput! = {}): Int
  ExcelFile: ExcelUpload
  createdAt: DateTime
  updatedAt: DateTime
}

enum EventStatusType {
  pending
  blocked
  active
  inactive
}

input EventWhereUniqueInput {
  id: ID
}

input EventWhereInput {
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
  id: IDFilter
  seller: SellerWhereInput
  eventType: EventTypeWhereInput
  eventCategory: EventCategoryWhereInput
  location: LocationWhereInput
  vehicles: VehicleManyRelationFilter
  startDate: DateTimeFilter
  endDate: DateTimeFilter
  noOfBids: IntFilter
  status: EventStatusTypeNullableFilter
  eventUsers: EventUserManyRelationFilter
  bids: BidManyRelationFilter
  ExcelFile: ExcelUploadWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input VehicleManyRelationFilter {
  every: VehicleWhereInput
  some: VehicleWhereInput
  none: VehicleWhereInput
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input EventStatusTypeNullableFilter {
  equals: EventStatusType
  in: [EventStatusType!]
  notIn: [EventStatusType!]
  not: EventStatusTypeNullableFilter
}

input EventOrderByInput {
  id: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  noOfBids: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input EventUpdateInput {
  seller: SellerRelateToOneForUpdateInput
  eventType: EventTypeRelateToOneForUpdateInput
  eventCategory: EventCategoryRelateToOneForUpdateInput
  location: LocationRelateToOneForUpdateInput
  vehicles: VehicleRelateToManyForUpdateInput
  startDate: DateTime
  endDate: DateTime
  noOfBids: Int
  status: EventStatusType
  eventUsers: EventUserRelateToManyForUpdateInput
  bids: BidRelateToManyForUpdateInput
  ExcelFile: ExcelUploadRelateToOneForUpdateInput
}

input SellerRelateToOneForUpdateInput {
  create: SellerCreateInput
  connect: SellerWhereUniqueInput
  disconnect: Boolean
}

input EventTypeRelateToOneForUpdateInput {
  create: EventTypeCreateInput
  connect: EventTypeWhereUniqueInput
  disconnect: Boolean
}

input EventCategoryRelateToOneForUpdateInput {
  create: EventCategoryCreateInput
  connect: EventCategoryWhereUniqueInput
  disconnect: Boolean
}

input LocationRelateToOneForUpdateInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
  disconnect: Boolean
}

input VehicleRelateToManyForUpdateInput {
  disconnect: [VehicleWhereUniqueInput!]
  set: [VehicleWhereUniqueInput!]
  create: [VehicleCreateInput!]
  connect: [VehicleWhereUniqueInput!]
}

input ExcelUploadRelateToOneForUpdateInput {
  create: ExcelUploadCreateInput
  connect: ExcelUploadWhereUniqueInput
  disconnect: Boolean
}

input EventUpdateArgs {
  where: EventWhereUniqueInput!
  data: EventUpdateInput!
}

input EventCreateInput {
  seller: SellerRelateToOneForCreateInput
  eventType: EventTypeRelateToOneForCreateInput
  eventCategory: EventCategoryRelateToOneForCreateInput
  location: LocationRelateToOneForCreateInput
  vehicles: VehicleRelateToManyForCreateInput
  startDate: DateTime
  endDate: DateTime
  noOfBids: Int
  status: EventStatusType
  eventUsers: EventUserRelateToManyForCreateInput
  bids: BidRelateToManyForCreateInput
  ExcelFile: ExcelUploadRelateToOneForCreateInput
}

input SellerRelateToOneForCreateInput {
  create: SellerCreateInput
  connect: SellerWhereUniqueInput
}

input EventTypeRelateToOneForCreateInput {
  create: EventTypeCreateInput
  connect: EventTypeWhereUniqueInput
}

input EventCategoryRelateToOneForCreateInput {
  create: EventCategoryCreateInput
  connect: EventCategoryWhereUniqueInput
}

input LocationRelateToOneForCreateInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
}

input VehicleRelateToManyForCreateInput {
  create: [VehicleCreateInput!]
  connect: [VehicleWhereUniqueInput!]
}

input ExcelUploadRelateToOneForCreateInput {
  create: ExcelUploadCreateInput
  connect: ExcelUploadWhereUniqueInput
}

type EventType {
  id: ID!
  name: String
  events(
    where: EventWhereInput! = {}
    orderBy: [EventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input EventTypeWhereUniqueInput {
  id: ID
}

input EventTypeWhereInput {
  AND: [EventTypeWhereInput!]
  OR: [EventTypeWhereInput!]
  NOT: [EventTypeWhereInput!]
  id: IDFilter
  name: StringFilter
  events: EventManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input EventManyRelationFilter {
  every: EventWhereInput
  some: EventWhereInput
  none: EventWhereInput
}

input EventTypeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input EventTypeUpdateInput {
  name: String
  events: EventRelateToManyForUpdateInput
}

input EventRelateToManyForUpdateInput {
  disconnect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

input EventTypeUpdateArgs {
  where: EventTypeWhereUniqueInput!
  data: EventTypeUpdateInput!
}

input EventTypeCreateInput {
  name: String
  events: EventRelateToManyForCreateInput
}

input EventRelateToManyForCreateInput {
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

type Location {
  id: ID!
  name: String
  country: String
  state: String
  city: String
  events(
    where: EventWhereInput! = {}
    orderBy: [EventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input LocationWhereUniqueInput {
  id: ID
}

input LocationWhereInput {
  AND: [LocationWhereInput!]
  OR: [LocationWhereInput!]
  NOT: [LocationWhereInput!]
  id: IDFilter
  name: StringFilter
  country: StringFilter
  state: StringFilter
  city: StringFilter
  events: EventManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input LocationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  country: OrderDirection
  state: OrderDirection
  city: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input LocationUpdateInput {
  name: String
  country: String
  state: String
  city: String
  events: EventRelateToManyForUpdateInput
}

input LocationUpdateArgs {
  where: LocationWhereUniqueInput!
  data: LocationUpdateInput!
}

input LocationCreateInput {
  name: String
  country: String
  state: String
  city: String
  events: EventRelateToManyForCreateInput
}

type EventCategory {
  id: ID!
  name: String
  events(
    where: EventWhereInput! = {}
    orderBy: [EventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input EventCategoryWhereUniqueInput {
  id: ID
}

input EventCategoryWhereInput {
  AND: [EventCategoryWhereInput!]
  OR: [EventCategoryWhereInput!]
  NOT: [EventCategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  events: EventManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input EventCategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input EventCategoryUpdateInput {
  name: String
  events: EventRelateToManyForUpdateInput
}

input EventCategoryUpdateArgs {
  where: EventCategoryWhereUniqueInput!
  data: EventCategoryUpdateInput!
}

input EventCategoryCreateInput {
  name: String
  events: EventRelateToManyForCreateInput
}

type Vehicle {
  id: ID!
  registrationNumber: String
  loanAgreementNo: String
  registeredOwnerName: String
  make: String
  model: String
  varient: String
  categoty: String
  fuel: VehicleFuelType
  type: String
  rcStatus: String
  yearOfManufacture: Int
  ownership: Int
  kmReading: Int
  insuranceStatus: String
  yardLocation: String
  startPrice: Float
  reservePrice: Float
  repoDt: Int
  veicleLocation: String
  vehicleRemarks: String
  auctionManager: String
  actionManager: String
  sellerName: String
  parkingCharges: String
  insurance: String
  insuranceValidTill: String
  tax: String
  fitness: String
  permit: String
  fitnessPermit: String
  engineNo: String
  chassisNo: String
  frontImage: String
  backImage: String
  leftImage: String
  rightImage: String
  image5: String
  image6: String
  image7: String
  image8: String
  image9: String
  image10: String
  image11: String
  image12: String
  event: Event
  ExcelFile: ExcelUpload
  bids(
    where: BidWhereInput! = {}
    orderBy: [BidOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Bid!]
  bidsCount(where: BidWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

enum VehicleFuelType {
  diesel
  petrol
  cng
  lpg
  electric
}

input VehicleWhereUniqueInput {
  id: ID
}

input VehicleWhereInput {
  AND: [VehicleWhereInput!]
  OR: [VehicleWhereInput!]
  NOT: [VehicleWhereInput!]
  id: IDFilter
  registrationNumber: StringFilter
  loanAgreementNo: StringFilter
  registeredOwnerName: StringFilter
  make: StringFilter
  model: StringFilter
  varient: StringFilter
  categoty: StringFilter
  fuel: VehicleFuelTypeNullableFilter
  type: StringFilter
  rcStatus: StringFilter
  yearOfManufacture: IntNullableFilter
  ownership: IntNullableFilter
  kmReading: IntNullableFilter
  insuranceStatus: StringFilter
  yardLocation: StringFilter
  startPrice: FloatNullableFilter
  reservePrice: FloatNullableFilter
  repoDt: IntNullableFilter
  veicleLocation: StringFilter
  vehicleRemarks: StringFilter
  auctionManager: StringFilter
  actionManager: StringFilter
  sellerName: StringFilter
  parkingCharges: StringFilter
  insurance: StringFilter
  insuranceValidTill: StringFilter
  tax: StringFilter
  fitness: StringFilter
  permit: StringFilter
  fitnessPermit: StringFilter
  engineNo: StringFilter
  chassisNo: StringFilter
  frontImage: StringFilter
  backImage: StringFilter
  leftImage: StringFilter
  rightImage: StringFilter
  image5: StringFilter
  image6: StringFilter
  image7: StringFilter
  image8: StringFilter
  image9: StringFilter
  image10: StringFilter
  image11: StringFilter
  image12: StringFilter
  event: EventWhereInput
  ExcelFile: ExcelUploadWhereInput
  bids: BidManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input VehicleFuelTypeNullableFilter {
  equals: VehicleFuelType
  in: [VehicleFuelType!]
  notIn: [VehicleFuelType!]
  not: VehicleFuelTypeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input VehicleOrderByInput {
  id: OrderDirection
  registrationNumber: OrderDirection
  loanAgreementNo: OrderDirection
  registeredOwnerName: OrderDirection
  make: OrderDirection
  model: OrderDirection
  varient: OrderDirection
  categoty: OrderDirection
  fuel: OrderDirection
  type: OrderDirection
  rcStatus: OrderDirection
  yearOfManufacture: OrderDirection
  ownership: OrderDirection
  kmReading: OrderDirection
  insuranceStatus: OrderDirection
  yardLocation: OrderDirection
  startPrice: OrderDirection
  reservePrice: OrderDirection
  repoDt: OrderDirection
  veicleLocation: OrderDirection
  vehicleRemarks: OrderDirection
  auctionManager: OrderDirection
  actionManager: OrderDirection
  sellerName: OrderDirection
  parkingCharges: OrderDirection
  insurance: OrderDirection
  insuranceValidTill: OrderDirection
  tax: OrderDirection
  fitness: OrderDirection
  permit: OrderDirection
  fitnessPermit: OrderDirection
  engineNo: OrderDirection
  chassisNo: OrderDirection
  frontImage: OrderDirection
  backImage: OrderDirection
  leftImage: OrderDirection
  rightImage: OrderDirection
  image5: OrderDirection
  image6: OrderDirection
  image7: OrderDirection
  image8: OrderDirection
  image9: OrderDirection
  image10: OrderDirection
  image11: OrderDirection
  image12: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input VehicleUpdateInput {
  registrationNumber: String
  loanAgreementNo: String
  registeredOwnerName: String
  make: String
  model: String
  varient: String
  categoty: String
  fuel: VehicleFuelType
  type: String
  rcStatus: String
  yearOfManufacture: Int
  ownership: Int
  kmReading: Int
  insuranceStatus: String
  yardLocation: String
  startPrice: Float
  reservePrice: Float
  repoDt: Int
  veicleLocation: String
  vehicleRemarks: String
  auctionManager: String
  actionManager: String
  sellerName: String
  parkingCharges: String
  insurance: String
  insuranceValidTill: String
  tax: String
  fitness: String
  permit: String
  fitnessPermit: String
  engineNo: String
  chassisNo: String
  frontImage: String
  backImage: String
  leftImage: String
  rightImage: String
  image5: String
  image6: String
  image7: String
  image8: String
  image9: String
  image10: String
  image11: String
  image12: String
  event: EventRelateToOneForUpdateInput
  ExcelFile: ExcelUploadRelateToOneForUpdateInput
  bids: BidRelateToManyForUpdateInput
}

input EventRelateToOneForUpdateInput {
  create: EventCreateInput
  connect: EventWhereUniqueInput
  disconnect: Boolean
}

input VehicleUpdateArgs {
  where: VehicleWhereUniqueInput!
  data: VehicleUpdateInput!
}

input VehicleCreateInput {
  registrationNumber: String
  loanAgreementNo: String
  registeredOwnerName: String
  make: String
  model: String
  varient: String
  categoty: String
  fuel: VehicleFuelType
  type: String
  rcStatus: String
  yearOfManufacture: Int
  ownership: Int
  kmReading: Int
  insuranceStatus: String
  yardLocation: String
  startPrice: Float
  reservePrice: Float
  repoDt: Int
  veicleLocation: String
  vehicleRemarks: String
  auctionManager: String
  actionManager: String
  sellerName: String
  parkingCharges: String
  insurance: String
  insuranceValidTill: String
  tax: String
  fitness: String
  permit: String
  fitnessPermit: String
  engineNo: String
  chassisNo: String
  frontImage: String
  backImage: String
  leftImage: String
  rightImage: String
  image5: String
  image6: String
  image7: String
  image8: String
  image9: String
  image10: String
  image11: String
  image12: String
  event: EventRelateToOneForCreateInput
  ExcelFile: ExcelUploadRelateToOneForCreateInput
  bids: BidRelateToManyForCreateInput
}

input EventRelateToOneForCreateInput {
  create: EventCreateInput
  connect: EventWhereUniqueInput
}

type EventUser {
  id: ID!
  event: Event
  user: User
  remainingBids: Int
  bidCountUpdates(
    where: BidCountUpdateWhereInput! = {}
    orderBy: [BidCountUpdateOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [BidCountUpdate!]
  bidCountUpdatesCount(where: BidCountUpdateWhereInput! = {}): Int
  status: EventUserStatusType
  createdAt: DateTime
  updatedAt: DateTime
}

enum EventUserStatusType {
  pending
  blocked
  accepted
}

input EventUserWhereUniqueInput {
  id: ID
}

input EventUserWhereInput {
  AND: [EventUserWhereInput!]
  OR: [EventUserWhereInput!]
  NOT: [EventUserWhereInput!]
  id: IDFilter
  event: EventWhereInput
  user: UserWhereInput
  remainingBids: IntNullableFilter
  bidCountUpdates: BidCountUpdateManyRelationFilter
  status: EventUserStatusTypeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input EventUserStatusTypeNullableFilter {
  equals: EventUserStatusType
  in: [EventUserStatusType!]
  notIn: [EventUserStatusType!]
  not: EventUserStatusTypeNullableFilter
}

input EventUserOrderByInput {
  id: OrderDirection
  remainingBids: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input EventUserUpdateInput {
  event: EventRelateToOneForUpdateInput
  user: UserRelateToOneForUpdateInput
  remainingBids: Int
  bidCountUpdates: BidCountUpdateRelateToManyForUpdateInput
  status: EventUserStatusType
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input EventUserUpdateArgs {
  where: EventUserWhereUniqueInput!
  data: EventUserUpdateInput!
}

input EventUserCreateInput {
  event: EventRelateToOneForCreateInput
  user: UserRelateToOneForCreateInput
  remainingBids: Int
  bidCountUpdates: BidCountUpdateRelateToManyForCreateInput
  status: EventUserStatusType
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type ExcelUpload {
  id: ID!
  name: String
  file: FileFieldOutput
  event: Event
  vehicles(
    where: VehicleWhereInput! = {}
    orderBy: [VehicleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Vehicle!]
  vehiclesCount(where: VehicleWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input ExcelUploadWhereUniqueInput {
  id: ID
}

input ExcelUploadWhereInput {
  AND: [ExcelUploadWhereInput!]
  OR: [ExcelUploadWhereInput!]
  NOT: [ExcelUploadWhereInput!]
  id: IDFilter
  name: StringFilter
  event: EventWhereInput
  vehicles: VehicleManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ExcelUploadOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ExcelUploadUpdateInput {
  name: String
  file: FileFieldInput
  event: EventRelateToOneForUpdateInput
  vehicles: VehicleRelateToManyForUpdateInput
}

input FileFieldInput {
  upload: Upload!
}

input ExcelUploadUpdateArgs {
  where: ExcelUploadWhereUniqueInput!
  data: ExcelUploadUpdateInput!
}

input ExcelUploadCreateInput {
  name: String
  file: FileFieldInput
  event: EventRelateToOneForCreateInput
  vehicles: VehicleRelateToManyForCreateInput
}

type Seller {
  id: ID!
  name: String
  events(
    where: EventWhereInput! = {}
    orderBy: [EventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input SellerWhereUniqueInput {
  id: ID
}

input SellerWhereInput {
  AND: [SellerWhereInput!]
  OR: [SellerWhereInput!]
  NOT: [SellerWhereInput!]
  id: IDFilter
  name: StringFilter
  events: EventManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input SellerOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SellerUpdateInput {
  name: String
  events: EventRelateToManyForUpdateInput
}

input SellerUpdateArgs {
  where: SellerWhereUniqueInput!
  data: SellerUpdateInput!
}

input SellerCreateInput {
  name: String
  events: EventRelateToManyForCreateInput
}

type BidCountUpdate {
  id: ID!
  eventUser: EventUser
  updatedBidCount: Int
  status: BidCountUpdateStatusType
  createdBy: User
  createdAt: DateTime
  updatedAt: DateTime
}

enum BidCountUpdateStatusType {
  pending
  blocked
  accepted
}

input BidCountUpdateWhereUniqueInput {
  id: ID
}

input BidCountUpdateWhereInput {
  AND: [BidCountUpdateWhereInput!]
  OR: [BidCountUpdateWhereInput!]
  NOT: [BidCountUpdateWhereInput!]
  id: IDFilter
  eventUser: EventUserWhereInput
  updatedBidCount: IntNullableFilter
  status: BidCountUpdateStatusTypeNullableFilter
  createdBy: UserWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input BidCountUpdateStatusTypeNullableFilter {
  equals: BidCountUpdateStatusType
  in: [BidCountUpdateStatusType!]
  notIn: [BidCountUpdateStatusType!]
  not: BidCountUpdateStatusTypeNullableFilter
}

input BidCountUpdateOrderByInput {
  id: OrderDirection
  updatedBidCount: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input BidCountUpdateUpdateInput {
  eventUser: EventUserRelateToOneForUpdateInput
  updatedBidCount: Int
  status: BidCountUpdateStatusType
  createdBy: UserRelateToOneForUpdateInput
}

input EventUserRelateToOneForUpdateInput {
  create: EventUserCreateInput
  connect: EventUserWhereUniqueInput
  disconnect: Boolean
}

input BidCountUpdateUpdateArgs {
  where: BidCountUpdateWhereUniqueInput!
  data: BidCountUpdateUpdateInput!
}

input BidCountUpdateCreateInput {
  eventUser: EventUserRelateToOneForCreateInput
  updatedBidCount: Int
  status: BidCountUpdateStatusType
  createdBy: UserRelateToOneForCreateInput
}

input EventUserRelateToOneForCreateInput {
  create: EventUserCreateInput
  connect: EventUserWhereUniqueInput
}

type Bid {
  id: ID!
  eventTimeExpire: DateTime
  bidTimeExpire: DateTime
  currentBidAmount: Int
  currentBidUser: User
  vehicles(
    where: VehicleWhereInput! = {}
    orderBy: [VehicleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Vehicle!]
  vehiclesCount(where: VehicleWhereInput! = {}): Int
  event: Event
  status: BidStatusType
  userBids(
    where: UserBidWhereInput! = {}
    orderBy: [UserBidOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [UserBid!]
  userBidsCount(where: UserBidWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

enum BidStatusType {
  pending
  blocked
  live
  closed
}

input BidWhereUniqueInput {
  id: ID
}

input BidWhereInput {
  AND: [BidWhereInput!]
  OR: [BidWhereInput!]
  NOT: [BidWhereInput!]
  id: IDFilter
  eventTimeExpire: DateTimeNullableFilter
  bidTimeExpire: DateTimeNullableFilter
  currentBidAmount: IntNullableFilter
  currentBidUser: UserWhereInput
  vehicles: VehicleManyRelationFilter
  event: EventWhereInput
  status: BidStatusTypeNullableFilter
  userBids: UserBidManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input BidStatusTypeNullableFilter {
  equals: BidStatusType
  in: [BidStatusType!]
  notIn: [BidStatusType!]
  not: BidStatusTypeNullableFilter
}

input BidOrderByInput {
  id: OrderDirection
  eventTimeExpire: OrderDirection
  bidTimeExpire: OrderDirection
  currentBidAmount: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input BidUpdateInput {
  eventTimeExpire: DateTime
  bidTimeExpire: DateTime
  currentBidAmount: Int
  currentBidUser: UserRelateToOneForUpdateInput
  vehicles: VehicleRelateToManyForUpdateInput
  event: EventRelateToOneForUpdateInput
  status: BidStatusType
  userBids: UserBidRelateToManyForUpdateInput
}

input BidUpdateArgs {
  where: BidWhereUniqueInput!
  data: BidUpdateInput!
}

input BidCreateInput {
  eventTimeExpire: DateTime
  bidTimeExpire: DateTime
  currentBidAmount: Int
  currentBidUser: UserRelateToOneForCreateInput
  vehicles: VehicleRelateToManyForCreateInput
  event: EventRelateToOneForCreateInput
  status: BidStatusType
  userBids: UserBidRelateToManyForCreateInput
}

type UserBid {
  id: ID!
  amount: Int
  user: User
  bid: Bid
  status: UserBidStatusType
  createdAt: DateTime
  updatedAt: DateTime
}

enum UserBidStatusType {
  pending
  blocked
  live
  closed
  accepted
}

input UserBidWhereUniqueInput {
  id: ID
}

input UserBidWhereInput {
  AND: [UserBidWhereInput!]
  OR: [UserBidWhereInput!]
  NOT: [UserBidWhereInput!]
  id: IDFilter
  amount: IntNullableFilter
  user: UserWhereInput
  bid: BidWhereInput
  status: UserBidStatusTypeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input UserBidStatusTypeNullableFilter {
  equals: UserBidStatusType
  in: [UserBidStatusType!]
  notIn: [UserBidStatusType!]
  not: UserBidStatusTypeNullableFilter
}

input UserBidOrderByInput {
  id: OrderDirection
  amount: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input UserBidUpdateInput {
  amount: Int
  user: UserRelateToOneForUpdateInput
  bid: BidRelateToOneForUpdateInput
  status: UserBidStatusType
}

input BidRelateToOneForUpdateInput {
  create: BidCreateInput
  connect: BidWhereUniqueInput
  disconnect: Boolean
}

input UserBidUpdateArgs {
  where: UserBidWhereUniqueInput!
  data: UserBidUpdateInput!
}

input UserBidCreateInput {
  amount: Int
  user: UserRelateToOneForCreateInput
  bid: BidRelateToOneForCreateInput
  status: UserBidStatusType
}

input BidRelateToOneForCreateInput {
  create: BidCreateInput
  connect: BidWhereUniqueInput
}

type Role {
  id: ID!
  name: String
  canCreateEvents: Boolean
  canManageAllEvents: Boolean
  canCreateEventTypes: Boolean
  canManageEventTypes: Boolean
  canCreateVehicles: Boolean
  canManbageVehicles: Boolean
  canCreateLocations: Boolean
  canManageLocations: Boolean
  canCreateEventCategories: Boolean
  canManageEventCategories: Boolean
  canCreateEventUsers: Boolean
  canManageEventUsers: Boolean
  canCreateSellers: Boolean
  canManageSellers: Boolean
  canCreateBids: Boolean
  canManageBids: Boolean
  canSeeOtherPeople: Boolean
  canEditOtherPeople: Boolean
  canManagePeople: Boolean
  canManageRoles: Boolean
  isSuperAdmin: Boolean
  assignedTo(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  assignedToCount(where: UserWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  canCreateEvents: BooleanFilter
  canManageAllEvents: BooleanFilter
  canCreateEventTypes: BooleanFilter
  canManageEventTypes: BooleanFilter
  canCreateVehicles: BooleanFilter
  canManbageVehicles: BooleanFilter
  canCreateLocations: BooleanFilter
  canManageLocations: BooleanFilter
  canCreateEventCategories: BooleanFilter
  canManageEventCategories: BooleanFilter
  canCreateEventUsers: BooleanFilter
  canManageEventUsers: BooleanFilter
  canCreateSellers: BooleanFilter
  canManageSellers: BooleanFilter
  canCreateBids: BooleanFilter
  canManageBids: BooleanFilter
  canSeeOtherPeople: BooleanFilter
  canEditOtherPeople: BooleanFilter
  canManagePeople: BooleanFilter
  canManageRoles: BooleanFilter
  isSuperAdmin: BooleanFilter
  assignedTo: UserManyRelationFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canCreateEvents: OrderDirection
  canManageAllEvents: OrderDirection
  canCreateEventTypes: OrderDirection
  canManageEventTypes: OrderDirection
  canCreateVehicles: OrderDirection
  canManbageVehicles: OrderDirection
  canCreateLocations: OrderDirection
  canManageLocations: OrderDirection
  canCreateEventCategories: OrderDirection
  canManageEventCategories: OrderDirection
  canCreateEventUsers: OrderDirection
  canManageEventUsers: OrderDirection
  canCreateSellers: OrderDirection
  canManageSellers: OrderDirection
  canCreateBids: OrderDirection
  canManageBids: OrderDirection
  canSeeOtherPeople: OrderDirection
  canEditOtherPeople: OrderDirection
  canManagePeople: OrderDirection
  canManageRoles: OrderDirection
  isSuperAdmin: OrderDirection
}

input RoleUpdateInput {
  name: String
  canCreateEvents: Boolean
  canManageAllEvents: Boolean
  canCreateEventTypes: Boolean
  canManageEventTypes: Boolean
  canCreateVehicles: Boolean
  canManbageVehicles: Boolean
  canCreateLocations: Boolean
  canManageLocations: Boolean
  canCreateEventCategories: Boolean
  canManageEventCategories: Boolean
  canCreateEventUsers: Boolean
  canManageEventUsers: Boolean
  canCreateSellers: Boolean
  canManageSellers: Boolean
  canCreateBids: Boolean
  canManageBids: Boolean
  canSeeOtherPeople: Boolean
  canEditOtherPeople: Boolean
  canManagePeople: Boolean
  canManageRoles: Boolean
  isSuperAdmin: Boolean
  assignedTo: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  canCreateEvents: Boolean
  canManageAllEvents: Boolean
  canCreateEventTypes: Boolean
  canManageEventTypes: Boolean
  canCreateVehicles: Boolean
  canManbageVehicles: Boolean
  canCreateLocations: Boolean
  canManageLocations: Boolean
  canCreateEventCategories: Boolean
  canManageEventCategories: Boolean
  canCreateEventUsers: Boolean
  canManageEventUsers: Boolean
  canCreateSellers: Boolean
  canManageSellers: Boolean
  canCreateBids: Boolean
  canManageBids: Boolean
  canSeeOtherPeople: Boolean
  canEditOtherPeople: Boolean
  canManagePeople: Boolean
  canManageRoles: Boolean
  isSuperAdmin: Boolean
  assignedTo: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createEvent(data: EventCreateInput!): Event
  createEvents(data: [EventCreateInput!]!): [Event]
  updateEvent(where: EventWhereUniqueInput!, data: EventUpdateInput!): Event
  updateEvents(data: [EventUpdateArgs!]!): [Event]
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteEvents(where: [EventWhereUniqueInput!]!): [Event]
  createEventType(data: EventTypeCreateInput!): EventType
  createEventTypes(data: [EventTypeCreateInput!]!): [EventType]
  updateEventType(
    where: EventTypeWhereUniqueInput!
    data: EventTypeUpdateInput!
  ): EventType
  updateEventTypes(data: [EventTypeUpdateArgs!]!): [EventType]
  deleteEventType(where: EventTypeWhereUniqueInput!): EventType
  deleteEventTypes(where: [EventTypeWhereUniqueInput!]!): [EventType]
  createLocation(data: LocationCreateInput!): Location
  createLocations(data: [LocationCreateInput!]!): [Location]
  updateLocation(
    where: LocationWhereUniqueInput!
    data: LocationUpdateInput!
  ): Location
  updateLocations(data: [LocationUpdateArgs!]!): [Location]
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deleteLocations(where: [LocationWhereUniqueInput!]!): [Location]
  createEventCategory(data: EventCategoryCreateInput!): EventCategory
  createEventCategories(data: [EventCategoryCreateInput!]!): [EventCategory]
  updateEventCategory(
    where: EventCategoryWhereUniqueInput!
    data: EventCategoryUpdateInput!
  ): EventCategory
  updateEventCategories(data: [EventCategoryUpdateArgs!]!): [EventCategory]
  deleteEventCategory(where: EventCategoryWhereUniqueInput!): EventCategory
  deleteEventCategories(
    where: [EventCategoryWhereUniqueInput!]!
  ): [EventCategory]
  createVehicle(data: VehicleCreateInput!): Vehicle
  createVehicles(data: [VehicleCreateInput!]!): [Vehicle]
  updateVehicle(
    where: VehicleWhereUniqueInput!
    data: VehicleUpdateInput!
  ): Vehicle
  updateVehicles(data: [VehicleUpdateArgs!]!): [Vehicle]
  deleteVehicle(where: VehicleWhereUniqueInput!): Vehicle
  deleteVehicles(where: [VehicleWhereUniqueInput!]!): [Vehicle]
  createEventUser(data: EventUserCreateInput!): EventUser
  createEventUsers(data: [EventUserCreateInput!]!): [EventUser]
  updateEventUser(
    where: EventUserWhereUniqueInput!
    data: EventUserUpdateInput!
  ): EventUser
  updateEventUsers(data: [EventUserUpdateArgs!]!): [EventUser]
  deleteEventUser(where: EventUserWhereUniqueInput!): EventUser
  deleteEventUsers(where: [EventUserWhereUniqueInput!]!): [EventUser]
  createExcelUpload(data: ExcelUploadCreateInput!): ExcelUpload
  createExcelUploads(data: [ExcelUploadCreateInput!]!): [ExcelUpload]
  updateExcelUpload(
    where: ExcelUploadWhereUniqueInput!
    data: ExcelUploadUpdateInput!
  ): ExcelUpload
  updateExcelUploads(data: [ExcelUploadUpdateArgs!]!): [ExcelUpload]
  deleteExcelUpload(where: ExcelUploadWhereUniqueInput!): ExcelUpload
  deleteExcelUploads(where: [ExcelUploadWhereUniqueInput!]!): [ExcelUpload]
  createSeller(data: SellerCreateInput!): Seller
  createSellers(data: [SellerCreateInput!]!): [Seller]
  updateSeller(where: SellerWhereUniqueInput!, data: SellerUpdateInput!): Seller
  updateSellers(data: [SellerUpdateArgs!]!): [Seller]
  deleteSeller(where: SellerWhereUniqueInput!): Seller
  deleteSellers(where: [SellerWhereUniqueInput!]!): [Seller]
  createBidCountUpdate(data: BidCountUpdateCreateInput!): BidCountUpdate
  createBidCountUpdates(data: [BidCountUpdateCreateInput!]!): [BidCountUpdate]
  updateBidCountUpdate(
    where: BidCountUpdateWhereUniqueInput!
    data: BidCountUpdateUpdateInput!
  ): BidCountUpdate
  updateBidCountUpdates(data: [BidCountUpdateUpdateArgs!]!): [BidCountUpdate]
  deleteBidCountUpdate(where: BidCountUpdateWhereUniqueInput!): BidCountUpdate
  deleteBidCountUpdates(
    where: [BidCountUpdateWhereUniqueInput!]!
  ): [BidCountUpdate]
  createBid(data: BidCreateInput!): Bid
  createBids(data: [BidCreateInput!]!): [Bid]
  updateBid(where: BidWhereUniqueInput!, data: BidUpdateInput!): Bid
  updateBids(data: [BidUpdateArgs!]!): [Bid]
  deleteBid(where: BidWhereUniqueInput!): Bid
  deleteBids(where: [BidWhereUniqueInput!]!): [Bid]
  createUserBid(data: UserBidCreateInput!): UserBid
  createUserBids(data: [UserBidCreateInput!]!): [UserBid]
  updateUserBid(
    where: UserBidWhereUniqueInput!
    data: UserBidUpdateInput!
  ): UserBid
  updateUserBids(data: [UserBidUpdateArgs!]!): [UserBid]
  deleteUserBid(where: UserBidWhereUniqueInput!): UserBid
  deleteUserBids(where: [UserBidWhereUniqueInput!]!): [UserBid]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  endSession: Boolean!
  authenticateUserWithPassword(
    mobile: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  sendUserMagicAuthLink(mobile: String!): Boolean!
  redeemUserMagicAuthToken(
    mobile: String!
    token: String!
  ): RedeemUserMagicAuthTokenResult!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  firstName: String
  lastName: String
  mobile: String
  password: String
}

union RedeemUserMagicAuthTokenResult =
    RedeemUserMagicAuthTokenSuccess
  | RedeemUserMagicAuthTokenFailure

type RedeemUserMagicAuthTokenSuccess {
  token: String!
  item: User!
}

type RedeemUserMagicAuthTokenFailure {
  code: MagicLinkRedemptionErrorCode!
  message: String!
}

enum MagicLinkRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  events(
    where: EventWhereInput! = {}
    orderBy: [EventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Event!]
  event(where: EventWhereUniqueInput!): Event
  eventsCount(where: EventWhereInput! = {}): Int
  eventTypes(
    where: EventTypeWhereInput! = {}
    orderBy: [EventTypeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [EventType!]
  eventType(where: EventTypeWhereUniqueInput!): EventType
  eventTypesCount(where: EventTypeWhereInput! = {}): Int
  locations(
    where: LocationWhereInput! = {}
    orderBy: [LocationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Location!]
  location(where: LocationWhereUniqueInput!): Location
  locationsCount(where: LocationWhereInput! = {}): Int
  eventCategories(
    where: EventCategoryWhereInput! = {}
    orderBy: [EventCategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [EventCategory!]
  eventCategory(where: EventCategoryWhereUniqueInput!): EventCategory
  eventCategoriesCount(where: EventCategoryWhereInput! = {}): Int
  vehicles(
    where: VehicleWhereInput! = {}
    orderBy: [VehicleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Vehicle!]
  vehicle(where: VehicleWhereUniqueInput!): Vehicle
  vehiclesCount(where: VehicleWhereInput! = {}): Int
  eventUsers(
    where: EventUserWhereInput! = {}
    orderBy: [EventUserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [EventUser!]
  eventUser(where: EventUserWhereUniqueInput!): EventUser
  eventUsersCount(where: EventUserWhereInput! = {}): Int
  excelUploads(
    where: ExcelUploadWhereInput! = {}
    orderBy: [ExcelUploadOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ExcelUpload!]
  excelUpload(where: ExcelUploadWhereUniqueInput!): ExcelUpload
  excelUploadsCount(where: ExcelUploadWhereInput! = {}): Int
  sellers(
    where: SellerWhereInput! = {}
    orderBy: [SellerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Seller!]
  seller(where: SellerWhereUniqueInput!): Seller
  sellersCount(where: SellerWhereInput! = {}): Int
  bidCountUpdates(
    where: BidCountUpdateWhereInput! = {}
    orderBy: [BidCountUpdateOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [BidCountUpdate!]
  bidCountUpdate(where: BidCountUpdateWhereUniqueInput!): BidCountUpdate
  bidCountUpdatesCount(where: BidCountUpdateWhereInput! = {}): Int
  bids(
    where: BidWhereInput! = {}
    orderBy: [BidOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Bid!]
  bid(where: BidWhereUniqueInput!): Bid
  bidsCount(where: BidWhereInput! = {}): Int
  userBids(
    where: UserBidWhereInput! = {}
    orderBy: [UserBidOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [UserBid!]
  userBid(where: UserBidWhereUniqueInput!): UserBid
  userBidsCount(where: UserBidWhereInput! = {}): Int
  roles(
    where: RoleWhereInput! = {}
    orderBy: [RoleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Role!]
  role(where: RoleWhereUniqueInput!): Role
  rolesCount(where: RoleWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
